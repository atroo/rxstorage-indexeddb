{"version":3,"sources":["../../src/rx-browser-storage-instance.ts"],"names":["require","filterInMemoryFields","instanceId","RxStorageBrowserInstance","databaseName","collectionName","options","schema","internals","changes$","Subject","closed","lastChangefeedSequence","prepareQuery","mutateableQuery","getSortComparator","query","sortOptions","sort","primaryPath","fun","a","b","compareResult","forEach","sortPart","fieldName","Object","keys","direction","values","directionMultiplier","valueA","valueB","args","getQueryMatcher","doc","_attachments","_deleted","_rev","json","inMemoryFields","length","preparedQuery","Promise","resolve","documents","getLocalState","getDb","db","rows","bulkWrite","documentWrites","ret","success","Map","error","txn","transaction","store","writeRow","startTime","Date","now","id","document","openCursor","documentInDbCursor","documentInDb","value","insertedIsDeleted","newRevision","writeDoc","assign","add","addChangeDocumentMeta","next","eventId","documentId","change","operation","previous","endTime","set","revInDb","err","isError","status","newRevHeight","update","commit","bulkAddRevisions","localState","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","docDataCpy","findDocumentsById","ids","deleted","get","getChangedDocuments","changedDocuments","lastSequence","sinceSequence","desc","keyRange","IDBKeyRange","lowerBound","upperBound","changesCollectionName","getChangesCollectionName","index","cursor","push","limit","slice","map","result","sequence","useForLastSequence","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","attachment","data","close","IDB_DATABASE_STATE_BY_NAME","complete","remove","removeCollection","databaseState","lastDoc","nextFeedSequence","put","createBrowserStorageLocalState","params","primaryKey","createBrowserStorageInstance","_params","version","instance"],"mappings":"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","sourcesContent":["import {\r\n  BlobBuffer,\r\n  BulkWriteRow,\r\n  ChangeStreamOnceOptions,\r\n  MangoQuery,\r\n  MangoQuerySortDirection,\r\n  MangoQuerySortPart,\r\n  RxAttachmentData,\r\n  RxAttachmentWriteData,\r\n  RxDocumentData,\r\n  RxDocumentWriteData,\r\n  RxJsonSchema,\r\n  RxStorageBulkWriteError,\r\n  RxStorageBulkWriteResponse,\r\n  RxStorageChangedDocumentMeta,\r\n  RxStorageChangeEvent,\r\n  RxStorageInstance,\r\n  RxStorageInstanceCreationParams,\r\n  RxStorageQueryResult,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport {\r\n  BrowserStorageInternals,\r\n  BrowserStorageSettings,\r\n} from \"./types/browser-storage\";\r\nimport {\r\n  createIdbDatabase,\r\n  getChangesCollName,\r\n  getPrimaryFieldOfPrimaryKey,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport {\r\n  ChangeEvent,\r\n  DeterministicSortComparator,\r\n  QueryMatcher,\r\n} from \"event-reduce-js/dist/lib/types\";\r\nimport { find } from \"./find\";\r\nimport { createRevision, getHeightOfRevision, parseRevision } from \"rxdb\";\r\nimport { getEventKey } from \"./utils\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\nlet instanceId = 1;\r\n\r\n// TODO: attachments: should we add \"digest\" and \"length\" to attachment ourself?\r\n\r\nexport class RxStorageBrowserInstance<RxDocType>\r\n  implements\r\n    RxStorageInstance<\r\n      RxDocType,\r\n      BrowserStorageInternals,\r\n      BrowserStorageSettings\r\n    >\r\n{\r\n  //   public readonly primaryPath: keyof RxDocType;\r\n  private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> =\r\n    new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n  private lastChangefeedSequence: number = 0;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<BrowserStorageSettings>,\r\n    public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\r\n    return mutateableQuery;\r\n  }\r\n\r\n  getSortComparator(query: MangoQuery<RxDocType>) {\r\n    // TODO if no sort is given, use sort by primary.\r\n    // This should be done inside of RxDB and not in the storage implementations.\r\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort\r\n      ? (query.sort as any)\r\n      : [\r\n          {\r\n            [this.internals.primaryPath]: \"asc\",\r\n          },\r\n        ];\r\n\r\n    const fun: DeterministicSortComparator<RxDocType> = (\r\n      a: RxDocType,\r\n      b: RxDocType\r\n    ) => {\r\n      let compareResult: number = 0;\r\n      sortOptions.forEach((sortPart) => {\r\n        const fieldName: string = Object.keys(sortPart)[0];\r\n        const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\r\n        const directionMultiplier = direction === \"asc\" ? 1 : -1;\r\n        const valueA: any = (a as any)[fieldName];\r\n        const valueB: any = (b as any)[fieldName];\r\n        if (valueA === valueB) {\r\n          return;\r\n        } else {\r\n          if (valueA > valueB) {\r\n            compareResult = 1 * directionMultiplier;\r\n          } else {\r\n            compareResult = -1 * directionMultiplier;\r\n          }\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Two different objects should never have the same sort position.\r\n       * We ensure this by having the unique primaryKey in the sort params\r\n       * at this.prepareQuery()\r\n       */\r\n      if (!compareResult) {\r\n        throw newRxError(\"SNH\", { args: { query, a, b } });\r\n      }\r\n\r\n      return compareResult as 1 | -1;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  getQueryMatcher(query: MangoQuery<RxDocType>) {\r\n    const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (\r\n      doc: RxDocumentWriteData<RxDocType>\r\n    ) => {\r\n      const { _attachments, _deleted, _rev, ...json } = doc;\r\n      const inMemoryFields = Object.keys(json);\r\n      return filterInMemoryFields([json], query, inMemoryFields).length > 0;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  async query(\r\n    preparedQuery: MangoQuery<RxDocType>\r\n  ): Promise<RxStorageQueryResult<RxDocType>> {\r\n    if (this.closed) {\r\n      return Promise.resolve({ documents: [] });\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const rows = await find(db, this.collectionName, preparedQuery);\r\n    return { documents: rows };\r\n  }\r\n\r\n  async bulkWrite(\r\n    documentWrites: BulkWriteRow<RxDocType>[]\r\n  ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n      success: new Map(),\r\n      error: new Map(),\r\n    };\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const startTime = Date.now();\r\n      const id: string = (writeRow.document as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        /**\r\n         * It is possible to insert already deleted documents,\r\n         * this can happen on replication.\r\n         */\r\n        const insertedIsDeleted = writeRow.document._deleted ? true : false;\r\n        if (insertedIsDeleted) {\r\n          continue;\r\n        }\r\n\r\n        // insert new document\r\n        const newRevision = \"1-\" + createRevision(writeRow.document);\r\n\r\n        const writeDoc = Object.assign({}, writeRow.document, {\r\n          _rev: newRevision,\r\n          _deleted: insertedIsDeleted,\r\n          _attachments: writeRow.document._attachments as {\r\n            [key: string]: RxAttachmentData;\r\n          },\r\n        });\r\n\r\n        await store.add(writeDoc);\r\n        this.addChangeDocumentMeta(id);\r\n        this.changes$.next({\r\n          eventId: getEventKey(false, id, newRevision),\r\n          documentId: id,\r\n          change: {\r\n            doc: writeDoc,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        ret.success.set(id, writeDoc as any);\r\n      } else {\r\n        // update existing document\r\n        const revInDb: string = documentInDb._rev;\r\n        if (\r\n          (!writeRow.previous && !documentInDb._deleted) ||\r\n          (!!writeRow.previous && revInDb !== writeRow.previous._rev)\r\n        ) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error.set(id, err);\r\n        } else {\r\n          const newRevHeight = getHeightOfRevision(revInDb) + 1;\r\n          const newRevision =\r\n            newRevHeight + \"-\" + createRevision(writeRow.document);\r\n\r\n          if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            writeRow.document._deleted\r\n          ) {\r\n            await documentInDbCursor.delete();\r\n            this.addChangeDocumentMeta(id); // TODO: do I need this here.\r\n            const previous = Object.assign({}, writeRow.previous);\r\n            previous._rev = newRevision;\r\n            const change = {\r\n              id,\r\n              operation: \"DELETE\" as \"DELETE\",\r\n              previous,\r\n              doc: null,\r\n            };\r\n            this.changes$.next({\r\n              eventId: getEventKey(false, id, newRevision),\r\n              documentId: id,\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            continue;\r\n          }\r\n\r\n          if (writeRow.document._deleted) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n\r\n          const writeDoc: any = Object.assign({}, writeRow.document, {\r\n            _rev: newRevision,\r\n            _deleted: false,\r\n          });\r\n          await documentInDbCursor.update(writeDoc);\r\n          this.addChangeDocumentMeta(id);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (\r\n            writeRow.previous &&\r\n            writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: writeDoc,\r\n            };\r\n          } else if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: writeRow.previous,\r\n              doc: writeDoc,\r\n            };\r\n          }\r\n          if (!change) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n          this.changes$.next({\r\n            eventId: getEventKey(false, id, newRevision),\r\n            documentId: id,\r\n            change,\r\n            startTime,\r\n            endTime: Date.now(),\r\n          });\r\n          ret.success.set(id, writeDoc);\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    return ret;\r\n  }\r\n\r\n  async bulkAddRevisions(\r\n    documents: RxDocumentData<RxDocType>[]\r\n  ): Promise<void> {\r\n    if (documents.length === 0) {\r\n      throw newRxError(\"P3\", {\r\n        args: {\r\n          documents,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n    for (const docData of documents) {\r\n      const startTime = Date.now();\r\n      const id: string = (docData as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // document not here, so we can directly insert\r\n        await store.add(Object.assign({}, docData));\r\n\r\n        this.changes$.next({\r\n          documentId: id,\r\n          eventId: getEventKey(false, id, docData._rev),\r\n          change: {\r\n            doc: docData,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        this.addChangeDocumentMeta(id);\r\n      } else {\r\n        const newWriteRevision = parseRevision(docData._rev);\r\n        const oldRevision = parseRevision(documentInDb._rev);\r\n\r\n        let mustUpdate: boolean = false;\r\n        if (newWriteRevision.height !== oldRevision.height) {\r\n          // height not equal, compare base on height\r\n          if (newWriteRevision.height > oldRevision.height) {\r\n            mustUpdate = true;\r\n          }\r\n        } else if (newWriteRevision.hash > oldRevision.hash) {\r\n          // equal height but new write has the 'winning' hash\r\n          mustUpdate = true;\r\n        }\r\n        if (mustUpdate) {\r\n          const docDataCpy = Object.assign({}, docData);\r\n          documentInDbCursor.update(docDataCpy);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: documentInDb,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"DELETE\",\r\n              previous: documentInDb,\r\n              doc: null,\r\n            };\r\n          } else if (documentInDb._deleted && docData._deleted) {\r\n            change = null;\r\n          }\r\n          if (change) {\r\n            this.changes$.next({\r\n              documentId: id,\r\n              eventId: getEventKey(false, id, docData._rev),\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            this.addChangeDocumentMeta(id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n  }\r\n\r\n  async findDocumentsById(\r\n    ids: string[],\r\n    deleted: boolean\r\n  ): Promise<Map<string, RxDocumentData<RxDocType>>> {\r\n    const ret: Map<string, RxDocumentData<RxDocType>> = new Map();\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && (!documentInDb._deleted || deleted)) {\r\n        ret.set(id, documentInDb);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  async getChangedDocuments(options: ChangeStreamOnceOptions): Promise<{\r\n    changedDocuments: RxStorageChangedDocumentMeta[];\r\n    lastSequence: number;\r\n  }> {\r\n    if (this.closed) {\r\n      return {\r\n        changedDocuments: [],\r\n        lastSequence: options.sinceSequence,\r\n      };\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n\r\n    const desc = options.direction === \"before\";\r\n    const keyRange =\r\n      options.direction === \"after\"\r\n        ? IDBKeyRange.lowerBound(options.sinceSequence, true)\r\n        : IDBKeyRange.upperBound(options.sinceSequence, true);\r\n\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n    let cursor = await store\r\n      .index(\"sequence\")\r\n      .openCursor(keyRange, desc ? \"prev\" : \"next\");\r\n    let changedDocuments = [];\r\n    while (cursor) {\r\n      const value = cursor.value;\r\n      changedDocuments.push(value);\r\n      cursor = await cursor.continue();\r\n    }\r\n\r\n    if (options.limit) {\r\n      changedDocuments = changedDocuments.slice(0, options.limit);\r\n    }\r\n\r\n    changedDocuments = changedDocuments.map((result) => {\r\n      return {\r\n        id: result.id,\r\n        sequence: result.sequence,\r\n      };\r\n    });\r\n\r\n    const useForLastSequence = !desc\r\n      ? changedDocuments[changedDocuments.length - 1]\r\n      : changedDocuments[0];\r\n\r\n    const ret: {\r\n      changedDocuments: RxStorageChangedDocumentMeta[];\r\n      lastSequence: number;\r\n    } = {\r\n      changedDocuments,\r\n      lastSequence: useForLastSequence\r\n        ? useForLastSequence.sequence\r\n        : options.sinceSequence,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  async getAttachmentData(\r\n    _documentId: string,\r\n    _attachmentId: string\r\n  ): Promise<BlobBuffer> {\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const doc = await db.get(this.collectionName, _documentId);\r\n    if (!doc) {\r\n      throw new Error(\"doc does not exist\");\r\n    }\r\n\r\n    const attachment: RxAttachmentWriteData = doc._attachments[_attachmentId];\r\n    return attachment.data;\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.closed = true;\r\n\r\n    if (!IDB_DATABASE_STATE_BY_NAME.get(this.databaseName)) {\r\n      // already closed.\r\n      // different instance could already close db.\r\n      return;\r\n    }\r\n\r\n    this.changes$.complete();\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(this.databaseName);\r\n  }\r\n  async remove(): Promise<void> {\r\n    const localState = this.getLocalState();\r\n    await localState.removeCollection();\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(`localState is undefind (dbName: ${this.databaseName})`);\r\n    }\r\n\r\n    return localState;\r\n  }\r\n\r\n  private getChangesCollectionName() {\r\n    return this.internals.changesCollectionName;\r\n  }\r\n\r\n  /**\r\n   * Adds an entry to the changes feed\r\n   * that can be queried to check which documents have been\r\n   * changed since sequence X.\r\n   */\r\n  private async addChangeDocumentMeta(id: string) {\r\n    const localState = this.getLocalState();\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n\r\n    if (!this.lastChangefeedSequence) {\r\n      const cursor = await store.index(\"sequence\").openCursor(null, \"prev\");\r\n      const lastDoc = cursor?.value;\r\n      if (lastDoc) {\r\n        this.lastChangefeedSequence = lastDoc.sequence;\r\n      }\r\n    }\r\n\r\n    const nextFeedSequence = this.lastChangefeedSequence + 1;\r\n\r\n    await store.put({\r\n      eventId: id,\r\n      sequence: nextFeedSequence,\r\n    });\r\n\r\n    this.lastChangefeedSequence = nextFeedSequence;\r\n  }\r\n}\r\n\r\nexport const createBrowserStorageLocalState = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n): Promise<BrowserStorageInternals> => {\r\n  const databaseState = await createIdbDatabase(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    params.schema.primaryKey,\r\n    params.schema\r\n  );\r\n\r\n  return {\r\n    databaseState,\r\n    changesCollectionName: getChangesCollName(params.collectionName),\r\n    primaryPath: getPrimaryFieldOfPrimaryKey(params.schema.primaryKey),\r\n  };\r\n};\r\n\r\nexport const createBrowserStorageInstance = async <RxDocType>(\r\n  _params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n) => {\r\n  /**\r\n   * every collection name must have suffix: ${collName}-${coll.version}.\r\n   * Otherwise migration will break.\r\n   * Reason: when collection version changes rxdb copies data from collection\r\n   * and creates new one and old one is deleted.\r\n   */\r\n  const params: typeof _params = {\r\n    ..._params,\r\n    collectionName: `${_params.collectionName}-${_params.schema.version}`,\r\n  };\r\n\r\n  const internals: BrowserStorageInternals =\r\n    await createBrowserStorageLocalState(params);\r\n\r\n  const instance = new RxStorageBrowserInstance(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    params.schema,\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-storage-instance.js"}