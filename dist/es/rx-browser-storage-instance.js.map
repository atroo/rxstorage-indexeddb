{"version":3,"sources":["../../src/rx-browser-storage-instance.ts"],"names":["instanceId","RxStorageBrowserInstance","databaseName","collectionName","schema","internals","changes$","Subject","closed","prepareQuery","mutateableQuery","getSortComparator","query","sortOptions","sort","primaryPath","fun","a","b","compareResult","forEach","sortPart","fieldName","Object","keys","direction","values","directionMultiplier","valueA","valueB","args","getQueryMatcher","doc","createBrowserStorageLocalState","params","primaryKey","toString","databaseState","createBrowserStorageInstance","instance"],"mappings":"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","sourcesContent":["import {\r\n  MangoQuery,\r\n  MangoQuerySortDirection,\r\n  MangoQuerySortPart,\r\n  RxDocumentData,\r\n  RxDocumentWriteData,\r\n  RxJsonSchema,\r\n  RxStorageChangeEvent,\r\n  RxStorageInstance,\r\n  RxStorageInstanceCreationParams,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Subject } from \"rxjs\";\r\nimport {\r\n  BrowserStorageInternals,\r\n  BrowserStorageSettings,\r\n} from \"./types/browser-storage\";\r\nimport {\r\n  getIdbDatabase,\r\n  getPrimaryFieldOfPrimaryKey,\r\n  newRxError,\r\n} from \"./helpers\";\r\nimport {\r\n  DeterministicSortComparator,\r\n  QueryMatcher,\r\n} from \"event-reduce-js/dist/lib/types\";\r\n\r\nlet instanceId = 1;\r\n\r\nexport class RxStorageBrowserInstance<RxDocType>\r\n  implements\r\n    RxStorageInstance<\r\n      RxDocType,\r\n      BrowserStorageInternals,\r\n      BrowserStorageSettings\r\n    >\r\n{\r\n  //   public readonly primaryPath: keyof RxDocType;\r\n  private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> =\r\n    new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\r\n    return mutateableQuery;\r\n  }\r\n\r\n  getSortComparator(query: MangoQuery<RxDocType>) {\r\n    // TODO if no sort is given, use sort by primary.\r\n    // This should be done inside of RxDB and not in the storage implementations.\r\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort\r\n      ? (query.sort as any)\r\n      : [\r\n          {\r\n            [this.internals.primaryPath]: \"asc\",\r\n          },\r\n        ];\r\n\r\n    const fun: DeterministicSortComparator<RxDocType> = (\r\n      a: RxDocType,\r\n      b: RxDocType\r\n    ) => {\r\n      let compareResult: number = 0;\r\n      sortOptions.forEach((sortPart) => {\r\n        const fieldName: string = Object.keys(sortPart)[0];\r\n        const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\r\n        const directionMultiplier = direction === \"asc\" ? 1 : -1;\r\n        const valueA: any = (a as any)[fieldName];\r\n        const valueB: any = (b as any)[fieldName];\r\n        if (valueA === valueB) {\r\n          return;\r\n        } else {\r\n          if (valueA > valueB) {\r\n            compareResult = 1 * directionMultiplier;\r\n          } else {\r\n            compareResult = -1 * directionMultiplier;\r\n          }\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Two different objects should never have the same sort position.\r\n       * We ensure this by having the unique primaryKey in the sort params\r\n       * at this.prepareQuery()\r\n       */\r\n      if (!compareResult) {\r\n        throw newRxError(\"SNH\", { args: { query, a, b } });\r\n      }\r\n\r\n      return compareResult as 1 | -1;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  getQueryMatcher(query: MangoQuery<RxDocType>) {\r\n    const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (\r\n      doc: RxDocumentWriteData<RxDocType>\r\n    ) => {\r\n      // query.\r\n    };\r\n\r\n    return fun;\r\n  }\r\n}\r\n\r\nexport const createBrowserStorageLocalState = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n) => {\r\n  const primaryPath = getPrimaryFieldOfPrimaryKey(\r\n    params.schema.primaryKey\r\n  ).toString();\r\n  const databaseState = await getIdbDatabase(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    primaryPath,\r\n    params.schema\r\n  );\r\n\r\n  return {\r\n    databaseState,\r\n    primaryPath,\r\n  };\r\n};\r\n\r\nexport const createBrowserStorageInstance = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n) => {\r\n  const internals: BrowserStorageInternals =\r\n    await createBrowserStorageLocalState(params);\r\n\r\n  const instance = new RxStorageBrowserInstance(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    params.schema,\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-storage-instance.js"}