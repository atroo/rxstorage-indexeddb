{"version":3,"sources":["../../src/rx-browser-storage-instance.ts"],"names":["instanceId","createRevision","doc","randomstring","generate","RxStorageBrowserInstance","databaseName","collectionName","options","schema","internals","changes$","Subject","closed","lastChangefeedSequence","query","preparedQuery","Promise","resolve","documents","getLocalState","getDb","db","rows","console","log","bulkWrite","documentWrites","hardDeleteMode","length","args","ret","success","error","eventBulk","id","events","txn","transaction","store","writeRow","startTime","Date","now","document","primaryPath","openCursor","documentInDbCursor","documentInDb","value","newRevision","insertedIsDeleted","_deleted","writeDoc","Object","assign","_rev","_attachments","add","addChangeDocumentMeta","push","eventId","documentId","change","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","isDeleted","update","commit","next","bulkAddRevisions","localState","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","docDataCpy","findDocumentsById","ids","deleted","get","getChangedDocuments","changedDocuments","lastSequence","sinceSequence","desc","direction","keyRange","IDBKeyRange","lowerBound","upperBound","changesCollectionName","getChangesCollectionName","index","cursor","limit","slice","map","result","sequence","useForLastSequence","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","attachment","data","close","complete","IDB_DATABASE_STATE_BY_NAME","remove","removeDb","databaseState","lastDoc","nextFeedSequence","put","createBrowserStorageLocalState","params","idbSettings","primaryKey","createBrowserStorageInstance","_params","version","instance"],"mappings":"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","sourcesContent":["import {\r\n  BlobBuffer,\r\n  BulkWriteRow,\r\n  ChangeStreamOnceOptions,\r\n  EventBulk,\r\n  MangoQuery,\r\n  RxAttachmentData,\r\n  RxAttachmentWriteData,\r\n  RxDocumentData,\r\n  RxDocumentWriteData,\r\n  RxJsonSchema,\r\n  RxStorageBulkWriteError,\r\n  RxStorageBulkWriteResponse,\r\n  RxStorageChangedDocumentMeta,\r\n  RxStorageChangeEvent,\r\n  RxStorageInstance,\r\n  RxStorageInstanceCreationParams,\r\n  RxStorageQueryResult,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { BrowserStorageInternals, IdbSettings } from \"./types/browser-storage\";\r\nimport {\r\n  createIdbDatabase,\r\n  getChangesCollName,\r\n  getDbName,\r\n  getPrimaryFieldOfPrimaryKey,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport { ChangeEvent } from \"event-reduce-js/dist/lib/types\";\r\nimport { find } from \"./find\";\r\nimport { getHeightOfRevision, parseRevision, randomCouchString } from \"rxdb\";\r\nimport randomstring from \"randomstring\";\r\nimport { getEventKey } from \"./utils\";\r\n\r\nlet instanceId = 1;\r\n\r\nconst createRevision = <RxDocType>(doc: RxDocumentWriteData<RxDocType>) => {\r\n  /**\r\n   * rxdb uses cache that breaks (only findOne for some reason)\r\n   * when you upsert same doc\r\n   * (in our case we do something like this: delete -> insert -> upsert)\r\n   * findOne query somehow gets latest \"_resultsData\" (that was set by \"find\" query),\r\n   * but still returns outdated results to user (_resultsDocs$ subject keeps outdated docs)\r\n   * we need to check this again after we migrate to rxdb 12\r\n   */\r\n  return randomstring.generate(32);\r\n};\r\n\r\n// TODO: attachments: should we add \"digest\" and \"length\" to attachment ourself?\r\n\r\nexport class RxStorageBrowserInstance<RxDocType>\r\n  implements RxStorageInstance<RxDocType, BrowserStorageInternals, IdbSettings>\r\n{\r\n  //   public readonly primaryPath: keyof RxDocType;\r\n  private changes$: Subject<\r\n    EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>\r\n  > = new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n  private lastChangefeedSequence: number = 0;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<IdbSettings>,\r\n    public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  async query(\r\n    preparedQuery: MangoQuery<RxDocType>\r\n  ): Promise<RxStorageQueryResult<RxDocType>> {\r\n    if (this.closed) {\r\n      return Promise.resolve({ documents: [] });\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const rows = await find(\r\n      db,\r\n      this.databaseName,\r\n      this.collectionName,\r\n      preparedQuery\r\n    );\r\n    console.log(\"ROWS\", rows);\r\n    return { documents: rows };\r\n  }\r\n\r\n  async bulkWrite(\r\n    documentWrites: BulkWriteRow<RxDocType>[],\r\n    hardDeleteMode = false\r\n  ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n      success: {},\r\n      error: {},\r\n    };\r\n\r\n    const eventBulk: EventBulk<\r\n      RxStorageChangeEvent<RxDocumentData<RxDocType>>\r\n    > = {\r\n      id: randomCouchString(10),\r\n      events: [],\r\n    };\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const startTime = Date.now();\r\n      const id: string = (writeRow.document as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // insert new document\r\n        const newRevision = \"1-\" + createRevision(writeRow.document);\r\n\r\n        /**\r\n         * It is possible to insert already deleted documents,\r\n         * this can happen on replication.\r\n         */\r\n        const insertedIsDeleted = writeRow.document._deleted ? true : false;\r\n        if (hardDeleteMode && insertedIsDeleted) {\r\n          continue;\r\n        }\r\n\r\n        const writeDoc = Object.assign({}, writeRow.document, {\r\n          _rev: newRevision,\r\n          _deleted: insertedIsDeleted,\r\n          _attachments: writeRow.document._attachments as {\r\n            [key: string]: RxAttachmentData;\r\n          },\r\n        });\r\n\r\n        await store.add(writeDoc);\r\n        this.addChangeDocumentMeta(id);\r\n        eventBulk.events.push({\r\n          eventId: getEventKey(false, id, newRevision),\r\n          documentId: id,\r\n          change: {\r\n            doc: writeDoc,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        ret.success[id] = writeDoc;\r\n      } else {\r\n        // update existing document\r\n        const revInDb: string = documentInDb._rev;\r\n\r\n        // inserting a deleted document is possible\r\n        // without sending the previous data.\r\n        if (!writeRow.previous && documentInDb._deleted) {\r\n          writeRow.previous = documentInDb;\r\n        }\r\n\r\n        if (\r\n          (!writeRow.previous && !documentInDb._deleted) ||\r\n          (!!writeRow.previous && revInDb !== writeRow.previous._rev)\r\n        ) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error[id] = err;\r\n        } else {\r\n          const newRevHeight = getHeightOfRevision(revInDb) + 1;\r\n          const newRevision =\r\n            newRevHeight + \"-\" + createRevision(writeRow.document);\r\n          const isDeleted = !!writeRow.document._deleted;\r\n          const writeDoc: any = Object.assign({}, writeRow.document, {\r\n            _rev: newRevision,\r\n            _deleted: isDeleted,\r\n          });\r\n\r\n          if (hardDeleteMode && isDeleted) {\r\n            await documentInDbCursor.delete();\r\n          } else {\r\n            await documentInDbCursor.update(writeDoc);\r\n          }\r\n\r\n          this.addChangeDocumentMeta(id);\r\n\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (\r\n            writeRow.previous &&\r\n            writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: writeDoc,\r\n            };\r\n          } else if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: writeRow.previous,\r\n              doc: writeDoc,\r\n            };\r\n          } else if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            writeDoc._deleted\r\n          ) {\r\n            /**\r\n             * On delete, we send the 'new' rev in the previous property,\r\n             * to have the equal behavior as pouchdb.\r\n             */\r\n            const previous = Object.assign({}, writeRow.previous);\r\n            previous._rev = newRevision;\r\n            change = {\r\n              id,\r\n              operation: \"DELETE\",\r\n              previous,\r\n              doc: null,\r\n            };\r\n          }\r\n\r\n          if (!change) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n\r\n          eventBulk.events.push({\r\n            eventId: getEventKey(false, id, newRevision),\r\n            documentId: id,\r\n            change,\r\n            startTime,\r\n            endTime: Date.now(),\r\n          });\r\n          ret.success[id] = writeDoc;\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    this.changes$.next(eventBulk);\r\n    return ret;\r\n  }\r\n\r\n  async bulkAddRevisions(\r\n    documents: RxDocumentData<RxDocType>[]\r\n  ): Promise<void> {\r\n    if (documents.length === 0) {\r\n      throw newRxError(\"P3\", {\r\n        args: {\r\n          documents,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    const eventBulk: EventBulk<\r\n      RxStorageChangeEvent<RxDocumentData<RxDocType>>\r\n    > = {\r\n      id: randomCouchString(10),\r\n      events: [],\r\n    };\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n    for (const docData of documents) {\r\n      const startTime = Date.now();\r\n      const id: string = (docData as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // document not here, so we can directly insert\r\n        await store.add(Object.assign({}, docData));\r\n\r\n        eventBulk.events.push({\r\n          documentId: id,\r\n          eventId: getEventKey(false, id, docData._rev),\r\n          change: {\r\n            doc: docData,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        this.addChangeDocumentMeta(id);\r\n      } else {\r\n        const newWriteRevision = parseRevision(docData._rev);\r\n        const oldRevision = parseRevision(documentInDb._rev);\r\n\r\n        let mustUpdate: boolean = false;\r\n        if (newWriteRevision.height !== oldRevision.height) {\r\n          // height not equal, compare base on height\r\n          if (newWriteRevision.height > oldRevision.height) {\r\n            mustUpdate = true;\r\n          }\r\n        } else if (newWriteRevision.hash > oldRevision.hash) {\r\n          // equal height but new write has the 'winning' hash\r\n          mustUpdate = true;\r\n        }\r\n        if (mustUpdate) {\r\n          const docDataCpy = Object.assign({}, docData);\r\n          documentInDbCursor.update(docDataCpy);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: documentInDb,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"DELETE\",\r\n              previous: documentInDb,\r\n              doc: null,\r\n            };\r\n          } else if (documentInDb._deleted && docData._deleted) {\r\n            change = null;\r\n          }\r\n          if (change) {\r\n            eventBulk.events.push({\r\n              documentId: id,\r\n              eventId: getEventKey(false, id, docData._rev),\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            this.addChangeDocumentMeta(id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    this.changes$.next(eventBulk);\r\n  }\r\n\r\n  async findDocumentsById(\r\n    ids: string[],\r\n    deleted: boolean\r\n  ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\r\n    const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && (!documentInDb._deleted || deleted)) {\r\n        ret[id] = documentInDb;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  async getChangedDocuments(options: ChangeStreamOnceOptions): Promise<{\r\n    changedDocuments: RxStorageChangedDocumentMeta[];\r\n    lastSequence: number;\r\n  }> {\r\n    if (this.closed) {\r\n      return {\r\n        changedDocuments: [],\r\n        lastSequence: options.sinceSequence,\r\n      };\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n\r\n    const desc = options.direction === \"before\";\r\n    const keyRange =\r\n      options.direction === \"after\"\r\n        ? IDBKeyRange.lowerBound(options.sinceSequence, true)\r\n        : IDBKeyRange.upperBound(options.sinceSequence, true);\r\n\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n    let cursor = await store\r\n      .index(\"sequence\")\r\n      .openCursor(keyRange, desc ? \"prev\" : \"next\");\r\n    let changedDocuments = [];\r\n    while (cursor) {\r\n      const value = cursor.value;\r\n      changedDocuments.push(value);\r\n      cursor = await cursor.continue();\r\n    }\r\n\r\n    if (options.limit) {\r\n      changedDocuments = changedDocuments.slice(0, options.limit);\r\n    }\r\n\r\n    changedDocuments = changedDocuments.map((result) => {\r\n      return {\r\n        id: result.id,\r\n        sequence: result.sequence,\r\n      };\r\n    });\r\n\r\n    const useForLastSequence = !desc\r\n      ? changedDocuments[changedDocuments.length - 1]\r\n      : changedDocuments[0];\r\n\r\n    const ret: {\r\n      changedDocuments: RxStorageChangedDocumentMeta[];\r\n      lastSequence: number;\r\n    } = {\r\n      changedDocuments,\r\n      lastSequence: useForLastSequence\r\n        ? useForLastSequence.sequence\r\n        : options.sinceSequence,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  changeStream(): Observable<\r\n    EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>\r\n  > {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  async getAttachmentData(\r\n    _documentId: string,\r\n    _attachmentId: string\r\n  ): Promise<BlobBuffer> {\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const doc = await db.get(this.collectionName, _documentId);\r\n    if (!doc) {\r\n      throw new Error(\"doc does not exist\");\r\n    }\r\n\r\n    const attachment: RxAttachmentWriteData = doc._attachments[_attachmentId];\r\n    return attachment.data;\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.changes$.complete();\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(\r\n      getDbName(this.databaseName, this.collectionName)\r\n    );\r\n    this.closed = true;\r\n  }\r\n  async remove(): Promise<void> {\r\n    const localState = this.getLocalState();\r\n    await localState.removeDb();\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(`localState is undefind (dbName: ${this.databaseName})`);\r\n    }\r\n\r\n    return localState;\r\n  }\r\n\r\n  private getChangesCollectionName() {\r\n    return this.internals.changesCollectionName;\r\n  }\r\n\r\n  /**\r\n   * Adds an entry to the changes feed\r\n   * that can be queried to check which documents have been\r\n   * changed since sequence X.\r\n   */\r\n  private async addChangeDocumentMeta(id: string) {\r\n    const localState = this.getLocalState();\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n\r\n    if (!this.lastChangefeedSequence) {\r\n      const cursor = await store.index(\"sequence\").openCursor(null, \"prev\");\r\n      const lastDoc = cursor?.value;\r\n      if (lastDoc) {\r\n        this.lastChangefeedSequence = lastDoc.sequence;\r\n      }\r\n    }\r\n\r\n    const nextFeedSequence = this.lastChangefeedSequence + 1;\r\n\r\n    await store.put({\r\n      eventId: id,\r\n      sequence: nextFeedSequence,\r\n    });\r\n\r\n    this.lastChangefeedSequence = nextFeedSequence;\r\n  }\r\n}\r\n\r\nexport const createBrowserStorageLocalState = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, IdbSettings>,\r\n  idbSettings: IdbSettings\r\n): Promise<BrowserStorageInternals> => {\r\n  const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\r\n  const databaseState = await createIdbDatabase({\r\n    databaseName: params.databaseName,\r\n    collectionName: params.collectionName,\r\n    primaryPath: primaryPath,\r\n    schema: params.schema,\r\n    idbSettings,\r\n  });\r\n\r\n  return {\r\n    databaseState,\r\n    changesCollectionName: getChangesCollName(),\r\n    primaryPath,\r\n  };\r\n};\r\n\r\nexport const createBrowserStorageInstance = async <RxDocType>(\r\n  _params: RxStorageInstanceCreationParams<RxDocType, IdbSettings>,\r\n  idbSettings: IdbSettings\r\n) => {\r\n  /**\r\n   * every collection name must have suffix: ${collName}-${coll.version}.\r\n   * Otherwise migration will break.\r\n   * Reason: when collection version changes rxdb copies data from collection\r\n   * and creates new one and old one is deleted.\r\n   */\r\n  const params: typeof _params = {\r\n    ..._params,\r\n    collectionName: `${_params.collectionName}-${_params.schema.version}`,\r\n  };\r\n\r\n  const internals: BrowserStorageInternals =\r\n    await createBrowserStorageLocalState(params, idbSettings);\r\n\r\n  const instance = new RxStorageBrowserInstance(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    params.schema,\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-storage-instance.js"}