{"version":3,"sources":["../../src/rx-browser-storage-instance.ts"],"names":["require","filterInMemoryFields","instanceId","RxStorageBrowserInstance","databaseName","collectionName","options","schema","internals","changes$","Subject","closed","lastChangefeedSequence","prepareQuery","mutateableQuery","getSortComparator","query","sortOptions","sort","primaryPath","fun","a","b","compareResult","forEach","sortPart","fieldName","Object","keys","direction","values","directionMultiplier","valueA","valueB","args","getQueryMatcher","doc","_attachments","_deleted","_rev","json","inMemoryFields","length","preparedQuery","Promise","resolve","documents","getLocalState","getDb","db","rows","bulkWrite","documentWrites","ret","success","error","eventBulk","id","events","txn","transaction","store","writeRow","startTime","Date","now","document","openCursor","documentInDbCursor","documentInDb","value","insertedIsDeleted","newRevision","writeDoc","assign","add","addChangeDocumentMeta","push","eventId","documentId","change","operation","previous","endTime","revInDb","err","isError","status","newRevHeight","update","commit","next","bulkAddRevisions","localState","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","docDataCpy","findDocumentsById","ids","deleted","get","getChangedDocuments","changedDocuments","lastSequence","sinceSequence","desc","keyRange","IDBKeyRange","lowerBound","upperBound","changesCollectionName","getChangesCollectionName","index","cursor","limit","slice","map","result","sequence","useForLastSequence","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","attachment","data","close","IDB_DATABASE_STATE_BY_NAME","complete","remove","removeCollection","databaseState","lastDoc","nextFeedSequence","put","createBrowserStorageLocalState","params","primaryKey","createBrowserStorageInstance","_params","version","instance"],"mappings":"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","sourcesContent":["import {\r\n  BlobBuffer,\r\n  BulkWriteRow,\r\n  ChangeStreamOnceOptions,\r\n  EventBulk,\r\n  MangoQuery,\r\n  MangoQuerySortDirection,\r\n  MangoQuerySortPart,\r\n  RxAttachmentData,\r\n  RxAttachmentWriteData,\r\n  RxDocumentData,\r\n  RxDocumentWriteData,\r\n  RxJsonSchema,\r\n  RxStorageBulkWriteError,\r\n  RxStorageBulkWriteResponse,\r\n  RxStorageChangedDocumentMeta,\r\n  RxStorageChangeEvent,\r\n  RxStorageInstance,\r\n  RxStorageInstanceCreationParams,\r\n  RxStorageQueryResult,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport {\r\n  BrowserStorageInternals,\r\n  BrowserStorageSettings,\r\n} from \"./types/browser-storage\";\r\nimport {\r\n  createIdbDatabase,\r\n  getChangesCollName,\r\n  getPrimaryFieldOfPrimaryKey,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport {\r\n  ChangeEvent,\r\n  DeterministicSortComparator,\r\n  QueryMatcher,\r\n} from \"event-reduce-js/dist/lib/types\";\r\nimport { find } from \"./find\";\r\nimport {\r\n  createRevision,\r\n  getHeightOfRevision,\r\n  parseRevision,\r\n  randomCouchString,\r\n} from \"rxdb\";\r\nimport { getEventKey } from \"./utils\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\nlet instanceId = 1;\r\n\r\n// TODO: attachments: should we add \"digest\" and \"length\" to attachment ourself?\r\n\r\nexport class RxStorageBrowserInstance<RxDocType>\r\n  implements\r\n    RxStorageInstance<\r\n      RxDocType,\r\n      BrowserStorageInternals,\r\n      BrowserStorageSettings\r\n    >\r\n{\r\n  //   public readonly primaryPath: keyof RxDocType;\r\n  private changes$: Subject<\r\n    EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>\r\n  > = new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n  private lastChangefeedSequence: number = 0;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<BrowserStorageSettings>,\r\n    public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\r\n    return mutateableQuery;\r\n  }\r\n\r\n  getSortComparator(query: MangoQuery<RxDocType>) {\r\n    // TODO if no sort is given, use sort by primary.\r\n    // This should be done inside of RxDB and not in the storage implementations.\r\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort\r\n      ? (query.sort as any)\r\n      : [\r\n          {\r\n            [this.internals.primaryPath]: \"asc\",\r\n          },\r\n        ];\r\n\r\n    const fun: DeterministicSortComparator<RxDocType> = (\r\n      a: RxDocType,\r\n      b: RxDocType\r\n    ) => {\r\n      let compareResult: number = 0;\r\n      sortOptions.forEach((sortPart) => {\r\n        const fieldName: string = Object.keys(sortPart)[0];\r\n        const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\r\n        const directionMultiplier = direction === \"asc\" ? 1 : -1;\r\n        const valueA: any = (a as any)[fieldName];\r\n        const valueB: any = (b as any)[fieldName];\r\n        if (valueA === valueB) {\r\n          return;\r\n        } else {\r\n          if (valueA > valueB) {\r\n            compareResult = 1 * directionMultiplier;\r\n          } else {\r\n            compareResult = -1 * directionMultiplier;\r\n          }\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Two different objects should never have the same sort position.\r\n       * We ensure this by having the unique primaryKey in the sort params\r\n       * at this.prepareQuery()\r\n       */\r\n      if (!compareResult) {\r\n        throw newRxError(\"SNH\", { args: { query, a, b } });\r\n      }\r\n\r\n      return compareResult as 1 | -1;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  getQueryMatcher(query: MangoQuery<RxDocType>) {\r\n    const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (\r\n      doc: RxDocumentWriteData<RxDocType>\r\n    ) => {\r\n      const { _attachments, _deleted, _rev, ...json } = doc;\r\n      const inMemoryFields = Object.keys(json);\r\n      return filterInMemoryFields([json], query, inMemoryFields).length > 0;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  async query(\r\n    preparedQuery: MangoQuery<RxDocType>\r\n  ): Promise<RxStorageQueryResult<RxDocType>> {\r\n    if (this.closed) {\r\n      return Promise.resolve({ documents: [] });\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const rows = await find(db, this.collectionName, preparedQuery);\r\n    return { documents: rows };\r\n  }\r\n\r\n  async bulkWrite(\r\n    documentWrites: BulkWriteRow<RxDocType>[]\r\n  ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n      success: {},\r\n      error: {},\r\n    };\r\n\r\n    const eventBulk: EventBulk<\r\n      RxStorageChangeEvent<RxDocumentData<RxDocType>>\r\n    > = {\r\n      id: randomCouchString(10),\r\n      events: [],\r\n    };\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const startTime = Date.now();\r\n      const id: string = (writeRow.document as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        /**\r\n         * It is possible to insert already deleted documents,\r\n         * this can happen on replication.\r\n         */\r\n        const insertedIsDeleted = writeRow.document._deleted ? true : false;\r\n        if (insertedIsDeleted) {\r\n          continue;\r\n        }\r\n\r\n        // insert new document\r\n        const newRevision = \"1-\" + createRevision(writeRow.document);\r\n\r\n        const writeDoc = Object.assign({}, writeRow.document, {\r\n          _rev: newRevision,\r\n          _deleted: insertedIsDeleted,\r\n          _attachments: writeRow.document._attachments as {\r\n            [key: string]: RxAttachmentData;\r\n          },\r\n        });\r\n\r\n        await store.add(writeDoc);\r\n        this.addChangeDocumentMeta(id);\r\n        eventBulk.events.push({\r\n          eventId: getEventKey(false, id, newRevision),\r\n          documentId: id,\r\n          change: {\r\n            doc: writeDoc,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        ret.success[id] = writeDoc;\r\n      } else {\r\n        // update existing document\r\n        const revInDb: string = documentInDb._rev;\r\n        if (\r\n          (!writeRow.previous && !documentInDb._deleted) ||\r\n          (!!writeRow.previous && revInDb !== writeRow.previous._rev)\r\n        ) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error[id] = err;\r\n        } else {\r\n          const newRevHeight = getHeightOfRevision(revInDb) + 1;\r\n          const newRevision =\r\n            newRevHeight + \"-\" + createRevision(writeRow.document);\r\n\r\n          if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            writeRow.document._deleted\r\n          ) {\r\n            await documentInDbCursor.delete();\r\n            this.addChangeDocumentMeta(id); // TODO: do I need this here.\r\n            const previous = Object.assign({}, writeRow.previous);\r\n            previous._rev = newRevision;\r\n            const change = {\r\n              id,\r\n              operation: \"DELETE\" as \"DELETE\",\r\n              previous,\r\n              doc: null,\r\n            };\r\n            eventBulk.events.push({\r\n              eventId: getEventKey(false, id, newRevision),\r\n              documentId: id,\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            continue;\r\n          }\r\n\r\n          if (writeRow.document._deleted) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n\r\n          const writeDoc: any = Object.assign({}, writeRow.document, {\r\n            _rev: newRevision,\r\n            _deleted: false,\r\n          });\r\n          await documentInDbCursor.update(writeDoc);\r\n          this.addChangeDocumentMeta(id);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (\r\n            writeRow.previous &&\r\n            writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: writeDoc,\r\n            };\r\n          } else if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: writeRow.previous,\r\n              doc: writeDoc,\r\n            };\r\n          }\r\n          if (!change) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n          eventBulk.events.push({\r\n            eventId: getEventKey(false, id, newRevision),\r\n            documentId: id,\r\n            change,\r\n            startTime,\r\n            endTime: Date.now(),\r\n          });\r\n          ret.success[id] = writeDoc;\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    this.changes$.next(eventBulk);\r\n    return ret;\r\n  }\r\n\r\n  async bulkAddRevisions(\r\n    documents: RxDocumentData<RxDocType>[]\r\n  ): Promise<void> {\r\n    if (documents.length === 0) {\r\n      throw newRxError(\"P3\", {\r\n        args: {\r\n          documents,\r\n        },\r\n      });\r\n    }\r\n\r\n    if (this.closed) {\r\n      return;\r\n    }\r\n\r\n    const eventBulk: EventBulk<\r\n      RxStorageChangeEvent<RxDocumentData<RxDocType>>\r\n    > = {\r\n      id: randomCouchString(10),\r\n      events: [],\r\n    };\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n    for (const docData of documents) {\r\n      const startTime = Date.now();\r\n      const id: string = (docData as any)[this.internals.primaryPath];\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // document not here, so we can directly insert\r\n        await store.add(Object.assign({}, docData));\r\n\r\n        eventBulk.events.push({\r\n          documentId: id,\r\n          eventId: getEventKey(false, id, docData._rev),\r\n          change: {\r\n            doc: docData,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        this.addChangeDocumentMeta(id);\r\n      } else {\r\n        const newWriteRevision = parseRevision(docData._rev);\r\n        const oldRevision = parseRevision(documentInDb._rev);\r\n\r\n        let mustUpdate: boolean = false;\r\n        if (newWriteRevision.height !== oldRevision.height) {\r\n          // height not equal, compare base on height\r\n          if (newWriteRevision.height > oldRevision.height) {\r\n            mustUpdate = true;\r\n          }\r\n        } else if (newWriteRevision.hash > oldRevision.hash) {\r\n          // equal height but new write has the 'winning' hash\r\n          mustUpdate = true;\r\n        }\r\n        if (mustUpdate) {\r\n          const docDataCpy = Object.assign({}, docData);\r\n          documentInDbCursor.update(docDataCpy);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: documentInDb,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"DELETE\",\r\n              previous: documentInDb,\r\n              doc: null,\r\n            };\r\n          } else if (documentInDb._deleted && docData._deleted) {\r\n            change = null;\r\n          }\r\n          if (change) {\r\n            eventBulk.events.push({\r\n              documentId: id,\r\n              eventId: getEventKey(false, id, docData._rev),\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            this.addChangeDocumentMeta(id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    this.changes$.next(eventBulk);\r\n  }\r\n\r\n  async findDocumentsById(\r\n    ids: string[],\r\n    deleted: boolean\r\n  ): Promise<{ [documentId: string]: RxDocumentData<RxDocType> }> {\r\n    const ret: { [documentId: string]: RxDocumentData<RxDocType> } = {};\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && (!documentInDb._deleted || deleted)) {\r\n        ret[id] = documentInDb;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  async getChangedDocuments(options: ChangeStreamOnceOptions): Promise<{\r\n    changedDocuments: RxStorageChangedDocumentMeta[];\r\n    lastSequence: number;\r\n  }> {\r\n    if (this.closed) {\r\n      return {\r\n        changedDocuments: [],\r\n        lastSequence: options.sinceSequence,\r\n      };\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n\r\n    const desc = options.direction === \"before\";\r\n    const keyRange =\r\n      options.direction === \"after\"\r\n        ? IDBKeyRange.lowerBound(options.sinceSequence, true)\r\n        : IDBKeyRange.upperBound(options.sinceSequence, true);\r\n\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n    let cursor = await store\r\n      .index(\"sequence\")\r\n      .openCursor(keyRange, desc ? \"prev\" : \"next\");\r\n    let changedDocuments = [];\r\n    while (cursor) {\r\n      const value = cursor.value;\r\n      changedDocuments.push(value);\r\n      cursor = await cursor.continue();\r\n    }\r\n\r\n    if (options.limit) {\r\n      changedDocuments = changedDocuments.slice(0, options.limit);\r\n    }\r\n\r\n    changedDocuments = changedDocuments.map((result) => {\r\n      return {\r\n        id: result.id,\r\n        sequence: result.sequence,\r\n      };\r\n    });\r\n\r\n    const useForLastSequence = !desc\r\n      ? changedDocuments[changedDocuments.length - 1]\r\n      : changedDocuments[0];\r\n\r\n    const ret: {\r\n      changedDocuments: RxStorageChangedDocumentMeta[];\r\n      lastSequence: number;\r\n    } = {\r\n      changedDocuments,\r\n      lastSequence: useForLastSequence\r\n        ? useForLastSequence.sequence\r\n        : options.sinceSequence,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  changeStream(): Observable<\r\n    EventBulk<RxStorageChangeEvent<RxDocumentData<RxDocType>>>\r\n  > {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  async getAttachmentData(\r\n    _documentId: string,\r\n    _attachmentId: string\r\n  ): Promise<BlobBuffer> {\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const doc = await db.get(this.collectionName, _documentId);\r\n    if (!doc) {\r\n      throw new Error(\"doc does not exist\");\r\n    }\r\n\r\n    const attachment: RxAttachmentWriteData = doc._attachments[_attachmentId];\r\n    return attachment.data;\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.closed = true;\r\n\r\n    if (!IDB_DATABASE_STATE_BY_NAME.get(this.databaseName)) {\r\n      // already closed.\r\n      // different instance could already close db.\r\n      return;\r\n    }\r\n\r\n    this.changes$.complete();\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(this.databaseName);\r\n  }\r\n  async remove(): Promise<void> {\r\n    const localState = this.getLocalState();\r\n    await localState.removeCollection();\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(`localState is undefind (dbName: ${this.databaseName})`);\r\n    }\r\n\r\n    return localState;\r\n  }\r\n\r\n  private getChangesCollectionName() {\r\n    return this.internals.changesCollectionName;\r\n  }\r\n\r\n  /**\r\n   * Adds an entry to the changes feed\r\n   * that can be queried to check which documents have been\r\n   * changed since sequence X.\r\n   */\r\n  private async addChangeDocumentMeta(id: string) {\r\n    const localState = this.getLocalState();\r\n    const changesCollectionName = this.getChangesCollectionName();\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n\r\n    if (!this.lastChangefeedSequence) {\r\n      const cursor = await store.index(\"sequence\").openCursor(null, \"prev\");\r\n      const lastDoc = cursor?.value;\r\n      if (lastDoc) {\r\n        this.lastChangefeedSequence = lastDoc.sequence;\r\n      }\r\n    }\r\n\r\n    const nextFeedSequence = this.lastChangefeedSequence + 1;\r\n\r\n    await store.put({\r\n      eventId: id,\r\n      sequence: nextFeedSequence,\r\n    });\r\n\r\n    this.lastChangefeedSequence = nextFeedSequence;\r\n  }\r\n}\r\n\r\nexport const createBrowserStorageLocalState = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n): Promise<BrowserStorageInternals> => {\r\n  const primaryPath = getPrimaryFieldOfPrimaryKey(params.schema.primaryKey);\r\n  const databaseState = await createIdbDatabase(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    primaryPath,\r\n    params.schema\r\n  );\r\n\r\n  return {\r\n    databaseState,\r\n    changesCollectionName: getChangesCollName(params.collectionName),\r\n    primaryPath,\r\n  };\r\n};\r\n\r\nexport const createBrowserStorageInstance = async <RxDocType>(\r\n  _params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n) => {\r\n  /**\r\n   * every collection name must have suffix: ${collName}-${coll.version}.\r\n   * Otherwise migration will break.\r\n   * Reason: when collection version changes rxdb copies data from collection\r\n   * and creates new one and old one is deleted.\r\n   */\r\n  const params: typeof _params = {\r\n    ..._params,\r\n    collectionName: `${_params.collectionName}-${_params.schema.version}`,\r\n  };\r\n\r\n  const internals: BrowserStorageInternals =\r\n    await createBrowserStorageLocalState(params);\r\n\r\n  const instance = new RxStorageBrowserInstance(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    params.schema,\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-storage-instance.js"}