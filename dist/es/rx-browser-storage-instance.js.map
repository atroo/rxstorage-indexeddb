{"version":3,"sources":["../../src/rx-browser-storage-instance.ts"],"names":["require","filterInMemoryFields","instanceId","RxStorageBrowserInstance","databaseName","collectionName","options","schema","internals","changes$","Subject","closed","lastChangefeedSequence","prepareQuery","mutateableQuery","getSortComparator","query","sortOptions","sort","primaryPath","fun","a","b","compareResult","forEach","sortPart","fieldName","Object","keys","direction","values","directionMultiplier","valueA","valueB","args","getQueryMatcher","doc","console","log","_attachments","_deleted","_rev","json","inMemoryFields","length","preparedQuery","getLocalState","getDb","db","rows","documents","bulkWrite","documentWrites","txn","transaction","store","ret","success","Map","error","writeRow","startTime","Date","now","id","document","openCursor","documentInDbCursor","documentInDb","value","newRevision","insertedIsDeleted","writeDoc","assign","add","addChangeDocumentMeta","next","eventId","documentId","change","operation","previous","endTime","set","revInDb","err","isError","status","newRevHeight","update","commit","bulkAddRevisions","localState","docData","newWriteRevision","oldRevision","mustUpdate","height","hash","docDataCpy","findDocumentsById","ids","deleted","get","getChangedDocuments","desc","operator","changesCollectionName","index","cursor","changedDocuments","push","limit","slice","map","result","sequence","useForLastSequence","lastSequence","sinceSequence","changeStream","asObservable","getAttachmentData","_documentId","_attachmentId","Error","close","complete","IDB_DATABASE_STATE_BY_NAME","remove","databaseState","lastDoc","nextFeedSequence","put","createBrowserStorageLocalState","params","primaryKey","toString","createBrowserStorageInstance","instance"],"mappings":"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","sourcesContent":["import {\r\n  BlobBuffer,\r\n  BulkWriteRow,\r\n  ChangeStreamOnceOptions,\r\n  MangoQuery,\r\n  MangoQuerySortDirection,\r\n  MangoQuerySortPart,\r\n  RxDocumentData,\r\n  RxDocumentWriteData,\r\n  RxJsonSchema,\r\n  RxStorageBulkWriteError,\r\n  RxStorageBulkWriteResponse,\r\n  RxStorageChangedDocumentMeta,\r\n  RxStorageChangeEvent,\r\n  RxStorageInstance,\r\n  RxStorageInstanceCreationParams,\r\n  RxStorageQueryResult,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport {\r\n  BrowserStorageInternals,\r\n  BrowserStorageSettings,\r\n} from \"./types/browser-storage\";\r\nimport {\r\n  createIdbDatabase,\r\n  getPrimaryFieldOfPrimaryKey,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport {\r\n  ChangeEvent,\r\n  DeterministicSortComparator,\r\n  QueryMatcher,\r\n} from \"event-reduce-js/dist/lib/types\";\r\nimport { find } from \"./find\";\r\nimport { createRevision, getHeightOfRevision, parseRevision } from \"rxdb\";\r\nimport { getEventKey } from \"./utils\";\r\nimport { deleteDB } from \"idb\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\nlet instanceId = 1;\r\n\r\nexport class RxStorageBrowserInstance<RxDocType>\r\n  implements\r\n    RxStorageInstance<\r\n      RxDocType,\r\n      BrowserStorageInternals,\r\n      BrowserStorageSettings\r\n    >\r\n{\r\n  //   public readonly primaryPath: keyof RxDocType;\r\n  private changes$: Subject<RxStorageChangeEvent<RxDocumentData<RxDocType>>> =\r\n    new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n  private lastChangefeedSequence: number = 0;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<BrowserStorageSettings>,\r\n    public readonly schema: Readonly<RxJsonSchema<RxDocType>>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  prepareQuery(mutateableQuery: MangoQuery<RxDocType>) {\r\n    return mutateableQuery;\r\n  }\r\n\r\n  getSortComparator(query: MangoQuery<RxDocType>) {\r\n    // TODO if no sort is given, use sort by primary.\r\n    // This should be done inside of RxDB and not in the storage implementations.\r\n    const sortOptions: MangoQuerySortPart<RxDocType>[] = query.sort\r\n      ? (query.sort as any)\r\n      : [\r\n          {\r\n            [this.internals.primaryPath]: \"asc\",\r\n          },\r\n        ];\r\n\r\n    const fun: DeterministicSortComparator<RxDocType> = (\r\n      a: RxDocType,\r\n      b: RxDocType\r\n    ) => {\r\n      let compareResult: number = 0;\r\n      sortOptions.forEach((sortPart) => {\r\n        const fieldName: string = Object.keys(sortPart)[0];\r\n        const direction: MangoQuerySortDirection = Object.values(sortPart)[0];\r\n        const directionMultiplier = direction === \"asc\" ? 1 : -1;\r\n        const valueA: any = (a as any)[fieldName];\r\n        const valueB: any = (b as any)[fieldName];\r\n        if (valueA === valueB) {\r\n          return;\r\n        } else {\r\n          if (valueA > valueB) {\r\n            compareResult = 1 * directionMultiplier;\r\n          } else {\r\n            compareResult = -1 * directionMultiplier;\r\n          }\r\n        }\r\n      });\r\n\r\n      /**\r\n       * Two different objects should never have the same sort position.\r\n       * We ensure this by having the unique primaryKey in the sort params\r\n       * at this.prepareQuery()\r\n       */\r\n      if (!compareResult) {\r\n        throw newRxError(\"SNH\", { args: { query, a, b } });\r\n      }\r\n\r\n      return compareResult as 1 | -1;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  getQueryMatcher(query: MangoQuery<RxDocType>) {\r\n    const fun: QueryMatcher<RxDocumentWriteData<RxDocType>> = (\r\n      doc: RxDocumentWriteData<RxDocType>\r\n    ) => {\r\n      console.log(\"getQueryMatcher doc:\", doc);\r\n      const { _attachments, _deleted, _rev, ...json } = doc;\r\n      const inMemoryFields = Object.keys(json);\r\n      return filterInMemoryFields([json], query, inMemoryFields).length > 0;\r\n    };\r\n\r\n    return fun;\r\n  }\r\n\r\n  async query(\r\n    preparedQuery: MangoQuery<RxDocType>\r\n  ): Promise<RxStorageQueryResult<RxDocType>> {\r\n    const db = await this.getLocalState().getDb();\r\n    const rows = await find(db, this.collectionName, preparedQuery);\r\n    return { documents: rows };\r\n  }\r\n\r\n  async bulkWrite(\r\n    documentWrites: BulkWriteRow<RxDocType>[]\r\n  ): Promise<RxStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    const ret: RxStorageBulkWriteResponse<RxDocType> = {\r\n      success: new Map(),\r\n      error: new Map(),\r\n    };\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const startTime = Date.now();\r\n      const id: string = (writeRow.document as any)[this.internals.primaryPath];\r\n      // TODO: probably will have problems here.\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // insert new document\r\n        const newRevision = \"1-\" + createRevision(writeRow.document);\r\n\r\n        /**\r\n         * It is possible to insert already deleted documents,\r\n         * this can happen on replication.\r\n         */\r\n        const insertedIsDeleted = writeRow.document._deleted ? true : false;\r\n        if (insertedIsDeleted) {\r\n          // TODO: purge documents\r\n          continue;\r\n        }\r\n\r\n        const writeDoc = Object.assign({}, writeRow.document, {\r\n          _rev: newRevision,\r\n          _deleted: insertedIsDeleted,\r\n          // TODO attachments are currently not working with lokijs\r\n          _attachments: {} as any,\r\n        });\r\n\r\n        await store.add(writeDoc);\r\n        this.addChangeDocumentMeta(id);\r\n        this.changes$.next({\r\n          eventId: getEventKey(false, id, newRevision),\r\n          documentId: id,\r\n          change: {\r\n            doc: writeDoc,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        ret.success.set(id, writeDoc as any);\r\n      } else {\r\n        // update existing document\r\n        const revInDb: string = documentInDb._rev;\r\n\r\n        // inserting a deleted document is possible\r\n        // without sending the previous data.\r\n        // TODO: purge document\r\n        // if (!writeRow.previous && documentInDb._deleted) {\r\n        //   writeRow.previous = documentInDb;\r\n        // }\r\n\r\n        if (\r\n          (!writeRow.previous && !documentInDb._deleted) ||\r\n          (!!writeRow.previous && revInDb !== writeRow.previous._rev)\r\n        ) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error.set(id, err);\r\n        } else {\r\n          const newRevHeight = getHeightOfRevision(revInDb) + 1;\r\n          const newRevision =\r\n            newRevHeight + \"-\" + createRevision(writeRow.document);\r\n\r\n          if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            writeRow.document._deleted\r\n          ) {\r\n            // TODO: purge\r\n            await documentInDbCursor.delete();\r\n            this.addChangeDocumentMeta(id); // TODO: do I need this here.\r\n            const previous = Object.assign({}, writeRow.previous);\r\n            previous._rev = newRevision;\r\n            const change = {\r\n              id,\r\n              operation: \"DELETE\" as \"DELETE\",\r\n              previous,\r\n              doc: null,\r\n            };\r\n            this.changes$.next({\r\n              eventId: getEventKey(false, id, newRevision),\r\n              documentId: id,\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            continue;\r\n          }\r\n\r\n          if (writeRow.document._deleted) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n\r\n          const writeDoc: any = Object.assign({}, writeRow.document, {\r\n            _rev: newRevision,\r\n            _deleted: false,\r\n            _attachments: {}, // TODO: attachments\r\n          });\r\n          await documentInDbCursor.update(writeDoc);\r\n          this.addChangeDocumentMeta(id);\r\n\r\n          // TODO: stripIdbKey(writeDoc) ?\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (\r\n            writeRow.previous &&\r\n            writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: writeDoc,\r\n            };\r\n          } else if (\r\n            writeRow.previous &&\r\n            !writeRow.previous._deleted &&\r\n            !writeDoc._deleted\r\n          ) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: writeRow.previous,\r\n              doc: writeDoc,\r\n            };\r\n          }\r\n          if (!change) {\r\n            throw newRxError(\"SNH\", { args: { writeRow } });\r\n          }\r\n          this.changes$.next({\r\n            eventId: getEventKey(false, id, newRevision),\r\n            documentId: id,\r\n            change,\r\n            startTime,\r\n            endTime: Date.now(),\r\n          });\r\n          ret.success.set(id, writeDoc);\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    return ret;\r\n  }\r\n\r\n  async bulkAddRevisions(\r\n    documents: RxDocumentData<RxDocType>[]\r\n  ): Promise<void> {\r\n    if (documents.length === 0) {\r\n      throw newRxError(\"P3\", {\r\n        args: {\r\n          documents,\r\n        },\r\n      });\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    // TODO: stripKey(documentInDb) ?\r\n    for (const docData of documents) {\r\n      const startTime = Date.now();\r\n      const id: string = (docData as any)[this.internals.primaryPath];\r\n      // TODO: probably will have problems here.\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const documentInDb = documentInDbCursor?.value;\r\n      if (!documentInDb) {\r\n        // document not here, so we can directly insert\r\n        await store.add(Object.assign({}, docData));\r\n\r\n        this.changes$.next({\r\n          documentId: id,\r\n          eventId: getEventKey(false, id, docData._rev),\r\n          change: {\r\n            doc: docData,\r\n            id,\r\n            operation: \"INSERT\",\r\n            previous: null,\r\n          },\r\n          startTime,\r\n          endTime: Date.now(),\r\n        });\r\n        this.addChangeDocumentMeta(id);\r\n      } else {\r\n        const newWriteRevision = parseRevision(docData._rev);\r\n        const oldRevision = parseRevision(documentInDb._rev);\r\n\r\n        let mustUpdate: boolean = false;\r\n        if (newWriteRevision.height !== oldRevision.height) {\r\n          // height not equal, compare base on height\r\n          if (newWriteRevision.height > oldRevision.height) {\r\n            mustUpdate = true;\r\n          }\r\n        } else if (newWriteRevision.hash > oldRevision.hash) {\r\n          // equal height but new write has the 'winning' hash\r\n          mustUpdate = true;\r\n        }\r\n        if (mustUpdate) {\r\n          const docDataCpy = Object.assign({}, docData);\r\n          documentInDbCursor.update(docDataCpy);\r\n          let change: ChangeEvent<RxDocumentData<RxDocType>> | null = null;\r\n          if (documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"INSERT\",\r\n              previous: null,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && !docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"UPDATE\",\r\n              previous: documentInDb,\r\n              doc: docData,\r\n            };\r\n          } else if (!documentInDb._deleted && docData._deleted) {\r\n            change = {\r\n              id,\r\n              operation: \"DELETE\",\r\n              previous: documentInDb,\r\n              doc: null,\r\n            };\r\n          } else if (documentInDb._deleted && docData._deleted) {\r\n            change = null;\r\n          }\r\n          if (change) {\r\n            this.changes$.next({\r\n              documentId: id,\r\n              eventId: getEventKey(false, id, docData._rev),\r\n              change,\r\n              startTime,\r\n              endTime: Date.now(),\r\n            });\r\n            this.addChangeDocumentMeta(id);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n  }\r\n\r\n  async findDocumentsById(\r\n    ids: string[],\r\n    deleted: boolean\r\n  ): Promise<Map<string, RxDocumentData<RxDocType>>> {\r\n    const localState = this.getLocalState();\r\n    const ret: Map<string, RxDocumentData<RxDocType>> = new Map();\r\n\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && (!documentInDb._deleted || deleted)) {\r\n        // TODO: stripKey(documentInDb) ?\r\n        ret.set(id, documentInDb);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  async getChangedDocuments(options: ChangeStreamOnceOptions): Promise<{\r\n    changedDocuments: RxStorageChangedDocumentMeta[];\r\n    lastSequence: number;\r\n  }> {\r\n    const localState = this.getLocalState();\r\n\r\n    const desc = options.direction === \"before\";\r\n    const operator = options.direction === \"after\" ? \"$gt\" : \"$lt\";\r\n\r\n    const changesCollectionName = localState.changesCollectionName;\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n    let cursor = await store\r\n      .index(\"sequence\")\r\n      .openCursor(null, desc ? \"prev\" : \"next\");\r\n    let changedDocuments = [];\r\n    while (cursor) {\r\n      const value = cursor.value;\r\n      changedDocuments.push(value);\r\n      cursor = await cursor.continue();\r\n    }\r\n\r\n    if (options.limit) {\r\n      changedDocuments = changedDocuments.slice(0, options.limit);\r\n    }\r\n\r\n    changedDocuments = changedDocuments.map((result) => {\r\n      return {\r\n        id: result.id,\r\n        sequence: result.sequence,\r\n      };\r\n    });\r\n\r\n    const useForLastSequence = !desc\r\n      ? changedDocuments[changedDocuments.length - 1]\r\n      : changedDocuments[0];\r\n\r\n    const ret: {\r\n      changedDocuments: RxStorageChangedDocumentMeta[];\r\n      lastSequence: number;\r\n    } = {\r\n      changedDocuments,\r\n      lastSequence: useForLastSequence\r\n        ? useForLastSequence.sequence\r\n        : options.sinceSequence,\r\n    };\r\n\r\n    return ret;\r\n  }\r\n\r\n  changeStream(): Observable<RxStorageChangeEvent<RxDocumentData<RxDocType>>> {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  getAttachmentData(\r\n    _documentId: string,\r\n    _attachmentId: string\r\n  ): Promise<BlobBuffer> {\r\n    // TODO: attacments\r\n    throw new Error(\r\n      \"Attachments are not implemented in the lokijs RxStorage. Make a pull request.\"\r\n    );\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.closed = true;\r\n    this.changes$.complete();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(this.databaseName);\r\n\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n  }\r\n  async remove(): Promise<void> {\r\n    this.close();\r\n    // TODO: it can be a problem actually.\r\n    // The connection is not actually closed until all transactions created using this connection are complete.\r\n    await deleteDB(this.databaseName);\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(`localState is undefind (dbName: ${this.databaseName})`);\r\n    }\r\n\r\n    return localState;\r\n  }\r\n\r\n  /**\r\n   * Adds an entry to the changes feed\r\n   * that can be queried to check which documents have been\r\n   * changed since sequence X.\r\n   */\r\n  private async addChangeDocumentMeta(id: string) {\r\n    const localState = this.getLocalState();\r\n    const changesCollectionName = localState.changesCollectionName;\r\n    const db = await localState.getDb();\r\n    const store = db.transaction(changesCollectionName, \"readwrite\").store;\r\n\r\n    if (!this.lastChangefeedSequence) {\r\n      const cursor = await store.index(\"sequence\").openCursor(null, \"prev\");\r\n      const lastDoc = cursor?.value;\r\n      if (lastDoc) {\r\n        this.lastChangefeedSequence = lastDoc.sequence;\r\n      }\r\n    }\r\n\r\n    const nextFeedSequence = this.lastChangefeedSequence + 1;\r\n\r\n    await store.put({\r\n      id,\r\n      sequence: nextFeedSequence,\r\n    });\r\n\r\n    this.lastChangefeedSequence = nextFeedSequence;\r\n  }\r\n}\r\n\r\nexport const createBrowserStorageLocalState = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n): Promise<BrowserStorageInternals> => {\r\n  const primaryPath = getPrimaryFieldOfPrimaryKey(\r\n    params.schema.primaryKey\r\n  ).toString();\r\n  const databaseState = await createIdbDatabase(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    primaryPath,\r\n    params.schema\r\n  );\r\n\r\n  return {\r\n    databaseState,\r\n    primaryPath,\r\n  };\r\n};\r\n\r\nexport const createBrowserStorageInstance = async <RxDocType>(\r\n  params: RxStorageInstanceCreationParams<RxDocType, BrowserStorageSettings>\r\n) => {\r\n  const internals: BrowserStorageInternals =\r\n    await createBrowserStorageLocalState(params);\r\n\r\n  const instance = new RxStorageBrowserInstance(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    params.schema,\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-storage-instance.js"}