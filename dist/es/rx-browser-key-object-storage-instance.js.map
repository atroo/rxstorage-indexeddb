{"version":3,"sources":["../../src/rx-browser-key-object-storage-instance.ts"],"names":["instanceId","RxBrowserKeyObjectStorageInstance","databaseName","collectionName","options","internals","changes$","Subject","closed","bulkWrite","documentWrites","hardDeleteMode","length","args","ret","success","error","getLocalState","getDb","db","txn","transaction","store","eventBulk","id","events","writeRowById","Map","startTime","Date","now","writeRow","document","_id","set","openCursor","documentInDbCursor","writeDoc","Object","assign","purgeDoc","_deleted","docInDb","value","previous","newRevHeight","_rev","height","newRevision","err","isError","status","documentId","docCpy","update","add","endTime","event","operation","doc","previousDoc","eventId","storageChangeEvent","change","push","commit","next","getAll","findLocalDocumentsById","ids","localState","get","documentInDb","changeStream","asObservable","close","complete","IDB_DATABASE_STATE_BY_NAME","remove","removeDb","databaseState","Error","createBrowserKeyValueStorageLocalState","params","idbSettings","primaryPath","schema","indexes","version","changesCollectionName","createBrowserKeyObjectStorageInstance","_params","instance"],"mappings":"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","sourcesContent":["import { ChangeEvent } from \"event-reduce-js/dist/lib/types\";\r\nimport { createRevision, parseRevision, randomCouchString } from \"rxdb\";\r\nimport {\r\n  BulkWriteLocalRow,\r\n  EventBulk,\r\n  RxCollection,\r\n  RxKeyObjectStorageInstanceCreationParams,\r\n  RxLocalDocumentData,\r\n  RxLocalStorageBulkWriteResponse,\r\n  RxStorageBulkWriteLocalError,\r\n  RxStorageChangeEvent,\r\n  RxStorageKeyObjectInstance,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport {\r\n  createIdbDatabase,\r\n  getChangesCollName,\r\n  getDbName,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport { BrowserStorageInternals, IdbSettings } from \"./types/browser-storage\";\r\nimport { getEventKey } from \"./utils\";\r\n\r\nlet instanceId = 1;\r\n\r\nexport class RxBrowserKeyObjectStorageInstance<RxDocType>\r\n  implements RxStorageKeyObjectInstance<BrowserStorageInternals, IdbSettings>\r\n{\r\n  private changes$: Subject<\r\n    EventBulk<RxStorageChangeEvent<RxLocalDocumentData>>\r\n  > = new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<IdbSettings>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  async bulkWrite<RxDocType>(\r\n    documentWrites: BulkWriteLocalRow<RxDocType>[],\r\n    hardDeleteMode = false\r\n  ): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\r\n      success: {},\r\n      error: {},\r\n    };\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    const eventBulk: EventBulk<RxStorageChangeEvent<RxLocalDocumentData>> = {\r\n      id: randomCouchString(10),\r\n      events: [],\r\n    };\r\n    const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\r\n    const startTime = Date.now();\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const id = writeRow.document._id;\r\n      writeRowById.set(id, writeRow);\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const writeDoc = Object.assign({}, writeRow.document);\r\n      const purgeDoc = hardDeleteMode && writeDoc._deleted;\r\n      const docInDb = documentInDbCursor?.value;\r\n      const previous = writeRow.previous ? writeRow.previous : docInDb;\r\n      const newRevHeight = previous\r\n        ? parseRevision(previous._rev).height + 1\r\n        : 1;\r\n      const newRevision =\r\n        newRevHeight + \"-\" + createRevision(writeRow.document);\r\n      writeDoc._rev = newRevision;\r\n      if (docInDb) {\r\n        if (!writeRow.previous || docInDb._rev !== writeRow.previous._rev) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteLocalError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error[id] = err;\r\n          continue;\r\n        } else if (purgeDoc) {\r\n          await documentInDbCursor.delete();\r\n        } else {\r\n          const docCpy: any = Object.assign({}, writeDoc);\r\n          await documentInDbCursor.update(docCpy);\r\n        }\r\n      } else if (purgeDoc) {\r\n        //\r\n      } else {\r\n        await store.add(Object.assign({}, writeDoc));\r\n      }\r\n\r\n      ret.success[id] = writeDoc;\r\n\r\n      const endTime = Date.now();\r\n\r\n      let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\r\n      if (!writeRow.previous) {\r\n        // was insert\r\n\r\n        // TODO: I'm not sure if deleted local document can be saved to db.\r\n        // Just in case, let's check if doc is purged when we go this route.\r\n        event = purgeDoc\r\n          ? {\r\n              operation: \"DELETE\",\r\n              doc: null,\r\n              id: id,\r\n              previous: writeDoc,\r\n            }\r\n          : {\r\n              operation: \"INSERT\",\r\n              doc: writeDoc,\r\n              id: id,\r\n              previous: null,\r\n            };\r\n      } else if (writeRow.document._deleted) {\r\n        // was delete\r\n\r\n        // we need to add the new revision to the previous doc\r\n        // so that the eventkey is calculated correctly.\r\n        // Is this a hack? idk.\r\n        const previousDoc = Object.assign({}, writeRow.previous);\r\n        previousDoc._rev = newRevision;\r\n\r\n        event = {\r\n          operation: \"DELETE\",\r\n          doc: null,\r\n          id,\r\n          previous: previousDoc,\r\n        };\r\n      } else {\r\n        // was update\r\n        event = {\r\n          operation: \"UPDATE\",\r\n          doc: writeDoc,\r\n          id: id,\r\n          previous: writeRow.previous,\r\n        };\r\n      }\r\n\r\n      if (\r\n        writeRow.document._deleted &&\r\n        (!writeRow.previous || writeRow.previous._deleted)\r\n      ) {\r\n        /**\r\n         * An already deleted document was added to the storage engine,\r\n         * do not emit an event because it does not affect anything.\r\n         */\r\n      } else {\r\n        const doc: RxLocalDocumentData<RxDocType> =\r\n          event.operation === \"DELETE\"\r\n            ? (event.previous as any)\r\n            : (event.doc as any);\r\n        const eventId = getEventKey(true, doc._id, doc._rev ? doc._rev : \"\");\r\n        const storageChangeEvent: RxStorageChangeEvent<\r\n          RxLocalDocumentData<RxDocType>\r\n        > = {\r\n          eventId,\r\n          documentId: id,\r\n          change: event,\r\n          startTime,\r\n          endTime,\r\n        };\r\n        eventBulk.events.push(storageChangeEvent);\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    this.changes$.next(eventBulk);\r\n    return ret;\r\n  }\r\n\r\n  async getAll() {\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n    return store.getAll();\r\n  }\r\n\r\n  async findLocalDocumentsById<RxDocType = any>(ids: string[]) {\r\n    const ret: { [documentId: string]: RxLocalDocumentData<RxDocType> } = {};\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && !documentInDb._deleted) {\r\n        ret[id] = documentInDb;\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n  changeStream(): Observable<\r\n    EventBulk<RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any }>>>\r\n  > {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.changes$.complete();\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(\r\n      getDbName(this.databaseName, this.collectionName)\r\n    );\r\n    this.closed = true;\r\n  }\r\n  async remove(): Promise<void> {\r\n    const localState = this.getLocalState();\r\n    await localState.removeDb();\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(\r\n        `localState(keyVal storage) is undefind (dbName: ${this.databaseName})`\r\n      );\r\n    }\r\n\r\n    return localState;\r\n  }\r\n}\r\n\r\nexport async function createBrowserKeyValueStorageLocalState(\r\n  params: RxKeyObjectStorageInstanceCreationParams<IdbSettings>,\r\n  idbSettings: IdbSettings\r\n): Promise<BrowserStorageInternals> {\r\n  const primaryPath = \"_id\";\r\n\r\n  const databaseState = await createIdbDatabase({\r\n    databaseName: params.databaseName,\r\n    collectionName: params.collectionName,\r\n    primaryPath: \"_id\",\r\n    schema: { indexes: [], version: 0 },\r\n    idbSettings,\r\n  });\r\n\r\n  return {\r\n    databaseState,\r\n    changesCollectionName: getChangesCollName(),\r\n    primaryPath,\r\n  };\r\n}\r\n\r\nexport const createBrowserKeyObjectStorageInstance = async <RxDocType>(\r\n  _params: RxKeyObjectStorageInstanceCreationParams<IdbSettings>,\r\n  idbSettings: IdbSettings\r\n) => {\r\n  const params: typeof _params = {\r\n    ..._params,\r\n    databaseName: _params.databaseName + \"-key-object\",\r\n  };\r\n\r\n  const internals = await createBrowserKeyValueStorageLocalState(\r\n    params,\r\n    idbSettings\r\n  );\r\n\r\n  const instance = new RxBrowserKeyObjectStorageInstance<RxDocType>(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-key-object-storage-instance.js"}