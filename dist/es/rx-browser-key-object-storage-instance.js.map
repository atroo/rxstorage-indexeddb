{"version":3,"sources":["../../src/rx-browser-key-object-storage-instance.ts"],"names":["instanceId","RxBrowserKeyValStorageInstance","databaseName","collectionName","options","internals","changes$","Subject","closed","bulkWrite","documentWrites","length","args","ret","success","Map","error","getLocalState","getDb","db","txn","transaction","store","writeRowById","startTime","Date","now","writeRow","id","document","_id","set","openCursor","documentInDbCursor","writeDoc","Object","assign","docInDb","value","previous","newRevHeight","_rev","height","newRevision","err","isError","status","documentId","_deleted","docCpy","update","add","endTime","event","operation","doc","previousDoc","eventId","storageChangeEvent","change","next","commit","findLocalDocumentsById","ids","localState","get","documentInDb","changeStream","asObservable","close","IDB_DATABASE_STATE_BY_NAME","complete","remove","databaseState","Error","createBrowserKeyValueStorageLocalState","params","primaryPath","indexes","version","changesCollectionName","createBrowserKeyObjectStorageInstance","instance"],"mappings":"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","sourcesContent":["import { ChangeEvent } from \"event-reduce-js/dist/lib/types\";\r\nimport { deleteDB } from \"idb\";\r\nimport { createRevision, parseRevision } from \"rxdb\";\r\nimport {\r\n  BulkWriteLocalRow,\r\n  RxKeyObjectStorageInstanceCreationParams,\r\n  RxLocalDocumentData,\r\n  RxLocalStorageBulkWriteResponse,\r\n  RxStorageBulkWriteLocalError,\r\n  RxStorageChangeEvent,\r\n  RxStorageKeyObjectInstance,\r\n} from \"rxdb/dist/types/types\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport {\r\n  createIdbDatabase,\r\n  getChangesCollName,\r\n  IDB_DATABASE_STATE_BY_NAME,\r\n  newRxError,\r\n} from \"./db-helpers\";\r\nimport {\r\n  BrowserStorageInternals,\r\n  BrowserStorageSettings,\r\n} from \"./types/browser-storage\";\r\nimport { getEventKey } from \"./utils\";\r\n\r\nlet instanceId = 1;\r\n\r\nexport class RxBrowserKeyValStorageInstance<RxDocType>\r\n  implements\r\n    RxStorageKeyObjectInstance<BrowserStorageInternals, BrowserStorageSettings>\r\n{\r\n  private changes$: Subject<\r\n    RxStorageChangeEvent<RxLocalDocumentData<RxDocType>>\r\n  > = new Subject();\r\n  public readonly instanceId = instanceId++;\r\n  private closed = false;\r\n\r\n  constructor(\r\n    public readonly databaseName: string,\r\n    public readonly collectionName: string,\r\n    public readonly options: Readonly<BrowserStorageSettings>,\r\n    public readonly internals: BrowserStorageInternals // public readonly options: Readonly<BrowserStorageSettings> // public readonly databaseSettings: BrowserStorageSettings, // public readonly idleQueue: IdleQueue\r\n  ) {\r\n    // this.primaryPath = getPrimaryFieldOfPrimaryKey(this.schema.primaryKey);\r\n  }\r\n\r\n  async bulkWrite<RxDocType>(\r\n    documentWrites: BulkWriteLocalRow<RxDocType>[]\r\n  ): Promise<RxLocalStorageBulkWriteResponse<RxDocType>> {\r\n    if (documentWrites.length === 0) {\r\n      throw newRxError(\"P2\", {\r\n        args: {\r\n          documentWrites,\r\n        },\r\n      });\r\n    }\r\n\r\n    const ret: RxLocalStorageBulkWriteResponse<RxDocType> = {\r\n      success: new Map(),\r\n      error: new Map(),\r\n    };\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const db = await this.getLocalState().getDb();\r\n    const txn = db.transaction(this.collectionName, \"readwrite\");\r\n    const store = txn.store;\r\n\r\n    const writeRowById: Map<string, BulkWriteLocalRow<RxDocType>> = new Map();\r\n    const startTime = Date.now();\r\n\r\n    for (const writeRow of documentWrites) {\r\n      const id = writeRow.document._id;\r\n      writeRowById.set(id, writeRow);\r\n      const documentInDbCursor = await store.openCursor(id);\r\n      const writeDoc = Object.assign({}, writeRow.document);\r\n      const docInDb = documentInDbCursor?.value;\r\n      const previous = writeRow.previous ? writeRow.previous : docInDb;\r\n      const newRevHeight = previous\r\n        ? parseRevision(previous._rev).height + 1\r\n        : 1;\r\n      const newRevision =\r\n        newRevHeight + \"-\" + createRevision(writeRow.document);\r\n      writeDoc._rev = newRevision;\r\n      if (docInDb) {\r\n        if (!writeRow.previous || docInDb._rev !== writeRow.previous._rev) {\r\n          // conflict error\r\n          const err: RxStorageBulkWriteLocalError<RxDocType> = {\r\n            isError: true,\r\n            status: 409,\r\n            documentId: id,\r\n            writeRow: writeRow,\r\n          };\r\n          ret.error.set(id, err);\r\n          continue;\r\n        } else if (!writeRow.document._deleted) {\r\n          const docCpy: any = Object.assign({}, writeDoc);\r\n          await documentInDbCursor.update(docCpy);\r\n        } else {\r\n          // TODO: purge\r\n          await documentInDbCursor.delete();\r\n        }\r\n      } else if (!writeRow.document._deleted) {\r\n        // TODO: purge\r\n        await store.add(Object.assign({}, writeDoc));\r\n      }\r\n\r\n      ret.success.set(id, writeDoc);\r\n\r\n      const endTime = Date.now();\r\n\r\n      let event: ChangeEvent<RxLocalDocumentData<RxDocType>>;\r\n      if (!writeRow.previous) {\r\n        // was insert\r\n        event = {\r\n          operation: \"INSERT\",\r\n          doc: writeDoc,\r\n          id: id,\r\n          previous: null,\r\n        };\r\n      } else if (writeRow.document._deleted) {\r\n        // was delete\r\n\r\n        // we need to add the new revision to the previous doc\r\n        // so that the eventkey is calculated correctly.\r\n        // Is this a hack? idk.\r\n        const previousDoc = Object.assign({}, writeRow.previous);\r\n        previousDoc._rev = newRevision;\r\n\r\n        event = {\r\n          operation: \"DELETE\",\r\n          doc: null,\r\n          id,\r\n          previous: previousDoc,\r\n        };\r\n      } else {\r\n        // was update\r\n        event = {\r\n          operation: \"UPDATE\",\r\n          doc: writeDoc,\r\n          id: id,\r\n          previous: writeRow.previous,\r\n        };\r\n      }\r\n\r\n      if (\r\n        writeRow.document._deleted &&\r\n        (!writeRow.previous || writeRow.previous._deleted)\r\n      ) {\r\n        /**\r\n         * An already deleted document was added to the storage engine,\r\n         * do not emit an event because it does not affect anything.\r\n         */\r\n      } else {\r\n        const doc: RxLocalDocumentData<RxDocType> =\r\n          event.operation === \"DELETE\"\r\n            ? (event.previous as any)\r\n            : (event.doc as any);\r\n        const eventId = getEventKey(true, doc._id, doc._rev ? doc._rev : \"\");\r\n        const storageChangeEvent: RxStorageChangeEvent<\r\n          RxLocalDocumentData<RxDocType>\r\n        > = {\r\n          eventId,\r\n          documentId: id,\r\n          change: event,\r\n          startTime,\r\n          endTime,\r\n        };\r\n        // TODO: fix type\r\n        this.changes$.next(storageChangeEvent as any);\r\n      }\r\n    }\r\n\r\n    txn.commit();\r\n    return ret;\r\n  }\r\n\r\n  async findLocalDocumentsById<RxDocType = any>(\r\n    ids: string[]\r\n  ): Promise<Map<string, RxLocalDocumentData<RxDocType>>> {\r\n    const ret: Map<string, RxLocalDocumentData<RxDocType>> = new Map();\r\n\r\n    if (this.closed) {\r\n      return ret;\r\n    }\r\n\r\n    const localState = this.getLocalState();\r\n\r\n    const db = await localState.getDb();\r\n    const store = await db.transaction(this.collectionName, \"readwrite\").store;\r\n    for (const id of ids) {\r\n      const documentInDb = await store.get(id);\r\n      if (documentInDb && !documentInDb._deleted) {\r\n        ret.set(id, documentInDb);\r\n      }\r\n    }\r\n\r\n    return ret;\r\n  }\r\n  changeStream(): Observable<\r\n    RxStorageChangeEvent<RxLocalDocumentData<{ [key: string]: any }>>\r\n  > {\r\n    return this.changes$.asObservable();\r\n  }\r\n\r\n  async close(): Promise<void> {\r\n    this.closed = true;\r\n\r\n    if (!IDB_DATABASE_STATE_BY_NAME.get(this.databaseName)) {\r\n      // already closed.\r\n      // different instance could already close db.\r\n      return;\r\n    }\r\n\r\n    this.changes$.complete();\r\n    const localState = this.getLocalState();\r\n    const db = await localState.getDb();\r\n    db.close();\r\n    IDB_DATABASE_STATE_BY_NAME.delete(this.databaseName);\r\n  }\r\n  async remove(): Promise<void> {\r\n    if (!this.closed) {\r\n      this.close();\r\n    }\r\n    // TODO: it can be a problem actually.\r\n    // The connection is not actually closed until all transactions created using this connection are complete.\r\n    await deleteDB(this.databaseName);\r\n    this.closed = true;\r\n  }\r\n\r\n  private getLocalState() {\r\n    const localState = this.internals.databaseState;\r\n    if (!localState) {\r\n      throw new Error(\r\n        `localState(keyVal storage) is undefind (dbName: ${this.databaseName})`\r\n      );\r\n    }\r\n\r\n    return localState;\r\n  }\r\n}\r\n\r\nexport async function createBrowserKeyValueStorageLocalState(\r\n  params: RxKeyObjectStorageInstanceCreationParams<BrowserStorageSettings>\r\n): Promise<BrowserStorageInternals> {\r\n  const primaryPath = \"_id\";\r\n\r\n  const databaseState = await createIdbDatabase(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    \"_id\",\r\n    { indexes: [], version: 1 }\r\n  );\r\n\r\n  return {\r\n    databaseState,\r\n    changesCollectionName: getChangesCollName(params.collectionName),\r\n    primaryPath,\r\n  };\r\n}\r\n\r\nexport const createBrowserKeyObjectStorageInstance = async <RxDocType>(\r\n  params: RxKeyObjectStorageInstanceCreationParams<BrowserStorageInternals>\r\n) => {\r\n  const internals = await createBrowserKeyValueStorageLocalState(params);\r\n\r\n  const instance = new RxBrowserKeyValStorageInstance<RxDocType>(\r\n    params.databaseName,\r\n    params.collectionName,\r\n    {},\r\n    internals\r\n  );\r\n\r\n  /**\r\n   * TODO: should we do extra steps to enable CORRECT multiinstance?\r\n   */\r\n\r\n  return instance;\r\n};\r\n"],"file":"rx-browser-key-object-storage-instance.js"}