{"version":3,"sources":["../../src/rx-error.ts"],"names":["parametersToString","parameters","ret","Object","keys","length","map","k","paramStr","JSON","stringify","_k","v","undefined","e","join","messageForError","message","code","RxError","mes","rxdb","toString","Error"],"mappings":";;;;;;;;;;;;;;;AAEA,SAASA,kBAAT,CAA4BC,UAA5B,EAAqD;AACnD,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EAAwBI,MAAxB,KAAmC,CAAvC,EAA0C,OAAOH,GAAP;AAC1CA,EAAAA,GAAG,IAAI,uBAAP;AACAA,EAAAA,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYH,UAAZ,EACJK,GADI,CACA,UAACC,CAAD,EAAO;AACV,QAAIC,QAAQ,GAAG,iBAAf;;AACA,QAAI;AACFA,MAAAA,QAAQ,GAAGC,IAAI,CAACC,SAAL,CACTT,UAAU,CAACM,CAAD,CADD,EAET,UAACI,EAAD,EAAKC,CAAL;AAAA,eAAYA,CAAC,KAAKC,SAAN,GAAkB,IAAlB,GAAyBD,CAArC;AAAA,OAFS,EAGT,CAHS,CAAX;AAKD,KAND,CAME,OAAOE,CAAP,EAAU,CAAE;;AACd,WAAOP,CAAC,GAAG,GAAJ,GAAUC,QAAjB;AACD,GAXI,EAYJO,IAZI,CAYC,IAZD,CAAP;AAaAb,EAAAA,GAAG,IAAI,GAAP;AACA,SAAOA,GAAP;AACD;;AAED,SAASc,eAAT,CACEC,OADF,EAEEC,IAFF,EAGEjB,UAHF,EAIU;AACR,SACE,cACAiB,IADA,GAEA,IAFA,GAGA,IAHA,GAIAD,OAJA,GAKA,IALA,GAMAjB,kBAAkB,CAACC,UAAD,CAPpB;AASD;;IAEYkB,O;;;AAKX,mBACED,IADF,EAEED,OAFF,EAIE;AAAA;;AAAA,QADAhB,UACA,uEADgC,EAChC;AACA,QAAMmB,GAAG,GAAGJ,eAAe,CAACC,OAAD,EAAUC,IAAV,EAAgBjB,UAAhB,CAA3B;AACA,8BAAMmB,GAAN;AACA,UAAKF,IAAL,GAAYA,IAAZ;AACA,UAAKD,OAAL,GAAeG,GAAf;AACA,UAAKnB,UAAL,GAAkBA,UAAlB;AACA,UAAKoB,IAAL,GAAY,IAAZ,CANA,CAMkB;;AANlB;AAOD;;;;SAIDC,Q,GAAA,oBAAmB;AACjB,WAAO,KAAKL,OAAZ;AACD,G;;;;SALD,eAAmB;AACjB,aAAO,cAAc,KAAKC,IAAnB,GAA0B,GAAjC;AACD;;;SAID,eAAyB;AACvB,aAAO,KAAP;AACD;;;kDAzB0BK,K","sourcesContent":["import { RxErrorKey, RxErrorParameters } from \"rxdb/dist/types/types\";\r\n\r\nfunction parametersToString(parameters: any): string {\r\n  let ret = \"\";\r\n  if (Object.keys(parameters).length === 0) return ret;\r\n  ret += \"Given parameters: {\\n\";\r\n  ret += Object.keys(parameters)\r\n    .map((k) => {\r\n      let paramStr = \"[object Object]\";\r\n      try {\r\n        paramStr = JSON.stringify(\r\n          parameters[k],\r\n          (_k, v) => (v === undefined ? null : v),\r\n          2\r\n        );\r\n      } catch (e) {}\r\n      return k + \":\" + paramStr;\r\n    })\r\n    .join(\"\\n\");\r\n  ret += \"}\";\r\n  return ret;\r\n}\r\n\r\nfunction messageForError(\r\n  message: string,\r\n  code: string,\r\n  parameters: any\r\n): string {\r\n  return (\r\n    \"RxError (\" +\r\n    code +\r\n    \"):\" +\r\n    \"\\n\" +\r\n    message +\r\n    \"\\n\" +\r\n    parametersToString(parameters)\r\n  );\r\n}\r\n\r\nexport class RxError extends Error {\r\n  public code: RxErrorKey;\r\n  public message: string;\r\n  public parameters: RxErrorParameters;\r\n  public rxdb: true;\r\n  constructor(\r\n    code: RxErrorKey,\r\n    message: string,\r\n    parameters: RxErrorParameters = {}\r\n  ) {\r\n    const mes = messageForError(message, code, parameters);\r\n    super(mes);\r\n    this.code = code;\r\n    this.message = mes;\r\n    this.parameters = parameters;\r\n    this.rxdb = true; // tag them as internal\r\n  }\r\n  get name(): string {\r\n    return \"RxError (\" + this.code + \")\";\r\n  }\r\n  toString(): string {\r\n    return this.message;\r\n  }\r\n  get typeError(): boolean {\r\n    return false;\r\n  }\r\n}\r\n"],"file":"rx-error.js"}