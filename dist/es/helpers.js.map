{"version":3,"sources":["../../src/helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getIdbDatabase","databaseName","collectionName","primaryPath","schema","dbState","get","version","newCollectionAdded","collections","indexOf","upgradeVersion","db","close","upgrade","store","createObjectStore","keyPath","indices","indexes","forEach","idx","Array","isArray","push","idxName","createIndex","changesCollectionName","changesStore","blocked","alert","blocking","terminated","newDbState","concat","set","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nconst IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> = new Map();\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n */\r\nexport const getIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: RxJsonSchema<RxDocType>\r\n) => {\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  let version = schema.version;\r\n  if (dbState) {\r\n    const newCollectionAdded =\r\n      dbState.collections.indexOf(collectionName) === -1;\r\n    if (newCollectionAdded) {\r\n      dbState.upgradeVersion += 1;\r\n    }\r\n\r\n    version += dbState.upgradeVersion;\r\n\r\n    if (dbState.version === version) {\r\n      /**\r\n       * nothing has changed. no need to create new connection\r\n       */\r\n      return dbState;\r\n    } else {\r\n      dbState.db.close();\r\n    }\r\n  }\r\n\r\n  const db = await openDB(`${databaseName}.db`, version, {\r\n    upgrade(db) {\r\n      const store = db.createObjectStore(collectionName, {\r\n        keyPath: primaryPath,\r\n      });\r\n\r\n      /**\r\n       * Construct loki indexes from RxJsonSchema indexes.\r\n       * TODO what about compound indexes?\r\n       */\r\n      const indices: string[] = [];\r\n      if (schema.indexes) {\r\n        schema.indexes.forEach((idx) => {\r\n          if (!Array.isArray(idx)) {\r\n            indices.push(idx);\r\n          }\r\n        });\r\n      }\r\n\r\n      indices.forEach((idxName) => {\r\n        store.createIndex(idxName, idxName);\r\n      });\r\n\r\n      const changesCollectionName = collectionName + CHANGES_COLLECTION_SUFFIX;\r\n      const changesStore = db.createObjectStore(changesCollectionName, {\r\n        keyPath: \"eventId\",\r\n      });\r\n      changesStore.createIndex(\"sequence\", \"sequence\");\r\n    },\r\n    blocked() {\r\n      alert(\"Please close all other tabs with this site open!\");\r\n    },\r\n    blocking() {\r\n      // Make sure to add a handler to be notified if another page requests a version\r\n      // change. We must close the database. This allows the other page to upgrade the database.\r\n      // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n      //\r\n      //   db.close();\r\n      //   alert(\r\n      //     \"A new version of this page is ready. Please reload or close this tab!\"\r\n      //   );\r\n    },\r\n    terminated() {},\r\n  });\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    db,\r\n    collections: dbState\r\n      ? dbState.collections.concat(collectionName)\r\n      : [collectionName],\r\n    upgradeVersion: dbState ? dbState.upgradeVersion : 0,\r\n    version,\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"helpers.js"}