{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","genIndexName","index","Array","isArray","join","createIdbDatabase","databaseName","collectionName","primaryPath","schema","metaDB","dbState","get","metaData","reqMetaData","version","collections","dbName","updateNeeded","foundCol","find","col","name","indexes","forEach","idx","push","newCollections","changesCollectionName","newDbState","getDb","deleteCollections","dataBaseState","getDatabaseState","db","upgrade","length","collectionData","store","createObjectStore","keyPath","getPrimaryKeyValue","createIndex","colName","deleteObjectStore","blocking","close","terminated","indexedColsStore","transaction","collData","put","collection","value","getPrimaryFieldOfPrimaryKey","primary","seperator","separator","metaDataCollections","concat","map","coll","filter","indexOf","set","removeCollection","primaryKey","fields","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage","Error"],"mappings":"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","sourcesContent":["import { deleteDB, IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\n/**\r\n * TODO: handle properly primaryPath.\r\n */\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: PrimaryKey<RxDocType>,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    // Store \"version\" data in seperate db to properly handle indexeddb version update.\r\n    const reqMetaData = await metaDB.get(\"dbMetaData\", databaseName);\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = true;\r\n  const foundCol = metaData.collections.find(\r\n    (col) => col.name === collectionName\r\n  );\r\n  if (foundCol) {\r\n    updateNeeded = false;\r\n  }\r\n\r\n  const indexes: string | string[] = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n      version: schema.version,\r\n    });\r\n\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n      version: 1,\r\n    });\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    ...dbState,\r\n    getDb: async (deleteCollections?: string[]) => {\r\n      const dataBaseState = getDatabaseState(databaseName);\r\n\r\n      if (!dataBaseState.updateNeeded && dataBaseState.db) {\r\n        return dataBaseState.db;\r\n      }\r\n\r\n      const metaData = dataBaseState.metaData;\r\n      if (dataBaseState.updateNeeded) {\r\n        metaData.version += 1;\r\n      }\r\n\r\n      const newCollections = dataBaseState.newCollections;\r\n\r\n      const db = await openDB(databaseName, metaData.version, {\r\n        upgrade(db) {\r\n          if (!newCollections.length && !deleteCollections?.length) {\r\n            return;\r\n          }\r\n          for (const collectionData of newCollections) {\r\n            const store = db.createObjectStore(collectionData.collectionName, {\r\n              keyPath: getPrimaryKeyValue(collectionData.primaryPath),\r\n            });\r\n\r\n            collectionData.indexes.forEach((index) => {\r\n              store.createIndex(genIndexName(index), index);\r\n            });\r\n          }\r\n\r\n          if (deleteCollections) {\r\n            for (const colName of deleteCollections) {\r\n              db.deleteObjectStore(colName);\r\n            }\r\n          }\r\n        },\r\n        blocking() {\r\n          // Make sure to add a handler to be notified if another page requests a version\r\n          // change. We must close the database. This allows the other page to upgrade the database.\r\n          // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n          //\r\n          db.close();\r\n        },\r\n        terminated() {},\r\n      });\r\n\r\n      /**\r\n       * Store meta data about indexes\r\n       * Use it later to understand what index to use to query data\r\n       *\r\n       */\r\n      if (newCollections.length) {\r\n        const indexedColsStore = metaDB.transaction(\r\n          \"indexedCols\",\r\n          \"readwrite\"\r\n        ).store;\r\n\r\n        for (const collData of newCollections) {\r\n          const indexes = collData.indexes;\r\n          indexes.forEach((index) => {\r\n            indexedColsStore.put({\r\n              dbName: databaseName,\r\n              collection: collData.collectionName,\r\n              name: genIndexName(index),\r\n              value: index,\r\n            });\r\n          });\r\n          indexedColsStore.put({\r\n            dbName: databaseName,\r\n            collection: collData.collectionName,\r\n            name: getPrimaryFieldOfPrimaryKey(collData.primaryPath),\r\n            value: getPrimaryKeyValue(collData.primaryPath),\r\n            primary:\r\n              collData.primaryPath === \"string\"\r\n                ? true\r\n                : {\r\n                    seperator: (\r\n                      collData.primaryPath as CompositePrimaryKey<RxDocType>\r\n                    ).separator,\r\n                  },\r\n          });\r\n        }\r\n      }\r\n\r\n      let metaDataCollections = metaData.collections.concat(\r\n        newCollections.map((coll) => {\r\n          return { name: coll.collectionName, version: coll.version };\r\n        })\r\n      );\r\n\r\n      /**\r\n       * exclude deleted collections from meta.\r\n       */\r\n      if (deleteCollections) {\r\n        metaDataCollections = metaDataCollections.filter((coll) => {\r\n          return deleteCollections.indexOf(coll.name) === -1;\r\n        });\r\n\r\n        for (const colName of deleteCollections) {\r\n          /**\r\n           * also delete indexes meta along with store. they're not needed anymore\r\n           * DO NOT do this via \"upgrade\" callback as upgrade transaction can be finish while\r\n           * indexes meta being removed\r\n           */\r\n          await metaDB.delete(\"indexedCols\", [databaseName, colName]);\r\n        }\r\n      }\r\n\r\n      // transaction went successfully. clear \"newCollections\"\r\n      const newDbState: BrowserStorageState = {\r\n        ...dataBaseState,\r\n        updateNeeded: false,\r\n        db,\r\n        newCollections: [],\r\n        metaData: {\r\n          ...dataBaseState.metaData,\r\n          collections: metaDataCollections,\r\n        },\r\n      };\r\n\r\n      await metaDB.put(\"dbMetaData\", newDbState.metaData);\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n      return db;\r\n    },\r\n    removeCollection: async () => {\r\n      const dataBaseState = getDatabaseState(databaseName);\r\n\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, {\r\n        ...dataBaseState,\r\n        updateNeeded: true,\r\n      });\r\n\r\n      return dataBaseState.getDb([\r\n        collectionName,\r\n        getChangesCollName(collectionName),\r\n      ]);\r\n    },\r\n    metaData,\r\n    updateNeeded,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryKeyValue<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): string | string[] {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).fields as string[];\r\n  }\r\n}\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): string {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key as string;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n\r\nexport const getDatabaseState = (databaseName: string) => {\r\n  const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (!dataBaseState) {\r\n    throw new Error(\"dataBase state is undefined\");\r\n  }\r\n\r\n  return dataBaseState;\r\n};\r\n"],"file":"db-helpers.js"}