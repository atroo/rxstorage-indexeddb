{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","INDEXES_META_COLLECTION_SUFFIX","INDEXES_META_PRIMARY_KEY","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","getIndexesMetaCollName","getIdbDatabase","databaseName","collectionName","primaryPath","schema","console","log","dbState","get","version","meta","newCollectionAdded","collections","indexOf","upgradeVersion","concat","indexes","forEach","idx","Array","isArray","push","changesCollectionName","newDbState","getDb","dataBaseState","Error","db","length","close","upgrade","storeData","store","createObjectStore","keyPath","idxName","createIndex","blocked","blocking","terminated","set","addEventListener","indexesStore","transaction","put","index","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\nexport const INDEXES_META_COLLECTION_SUFFIX = \"-idb-meta\";\r\nexport const INDEXES_META_PRIMARY_KEY = \"indexNameIdbMeta\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const getIndexesMetaCollName = (collName: string) => {\r\n  return collName + INDEXES_META_COLLECTION_SUFFIX;\r\n};\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n */\r\n\r\nexport const getIdbDatabase = <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  console.log(\"DB NAME\");\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  let version = schema.version + 1;\r\n  let meta: BrowserStorageState[\"meta\"] = [];\r\n  if (dbState) {\r\n    const newCollectionAdded =\r\n      dbState.collections.indexOf(collectionName) === -1;\r\n    if (newCollectionAdded) {\r\n      dbState.upgradeVersion += 1;\r\n    }\r\n\r\n    version += dbState.upgradeVersion;\r\n\r\n    if (dbState.version === version) {\r\n      /**\r\n       * nothing has changed. no need to create new connection\r\n       */\r\n      // return dbState;\r\n    }\r\n\r\n    meta = meta.concat(dbState.meta);\r\n  }\r\n\r\n  const indexes: string[] = [];\r\n  if (schema.indexes) {\r\n    // TODO: compund indexes;\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  meta.push({\r\n    collectionName,\r\n    primaryPath,\r\n    indexes,\r\n  });\r\n\r\n  /** should I created this only once or for every db?? */\r\n  meta.push({\r\n    collectionName: changesCollectionName,\r\n    primaryPath: \"eventId\",\r\n    indexes: [\"sequence\"],\r\n  });\r\n\r\n  // TODO: ADD IT ONlY ONCE\r\n  meta.push({\r\n    collectionName: getIndexesMetaCollName(collectionName),\r\n    primaryPath: INDEXES_META_PRIMARY_KEY,\r\n    indexes: [\"keyPath\"],\r\n  });\r\n\r\n  console.log(\"META!!!: \", meta);\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    getDb: async () => {\r\n      const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n      console.log(\"REQ DATBASE: \", [...(dataBaseState?.meta as any)]);\r\n      if (!dataBaseState) {\r\n        throw new Error(\"dataBase state is undefined\");\r\n      }\r\n\r\n      if (dataBaseState.db && !dataBaseState.meta.length) {\r\n        console.log(\"ALREADY EXISTS: \", [...(dataBaseState?.meta as any)]);\r\n        return dataBaseState.db;\r\n      }\r\n\r\n      if (dataBaseState.db) {\r\n        dataBaseState.db.close();\r\n      }\r\n\r\n      // TODO: manage version change.\r\n      const db = await openDB(`${databaseName}.db`, dataBaseState.version, {\r\n        async upgrade(db) {\r\n          const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n          const meta = dbState?.meta;\r\n          console.log(\"META:\", meta);\r\n          if (!meta) {\r\n            return;\r\n          }\r\n          console.log(\"storesData:\", meta);\r\n          for (const storeData of meta) {\r\n            /**\r\n             * Construct loki indexes from RxJsonSchema indexes.\r\n             * TODO what about compound indexes?\r\n             */\r\n            const store = db.createObjectStore(storeData.collectionName, {\r\n              keyPath: storeData.primaryPath,\r\n            });\r\n\r\n            storeData.indexes.forEach((idxName) => {\r\n              // FIXME\r\n              store.createIndex(idxName as string, idxName);\r\n            });\r\n          }\r\n        },\r\n        blocked() {\r\n          // alert(\"Please close all other tabs with this site open!\");\r\n        },\r\n        blocking() {\r\n          // Make sure to add a handler to be notified if another page requests a version\r\n          // change. We must close the database. This allows the other page to upgrade the database.\r\n          // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n          //\r\n          db.close();\r\n          // alert(\r\n          //   \"A new version of this page is ready. Please reload or close this tab!\"\r\n          // );\r\n        },\r\n        terminated() {},\r\n      });\r\n\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, { ...dataBaseState, db });\r\n      db.addEventListener(\"versionchange\", () => {\r\n        console.log(\"versionchange fired\");\r\n      });\r\n\r\n      const indexesStore = db.transaction(\r\n        getIndexesMetaCollName(collectionName),\r\n        \"readwrite\"\r\n      ).store;\r\n\r\n      /**\r\n       * Store meta data about index\r\n       * Use it later to understand what index to use to query data\r\n       *\r\n       */\r\n\r\n      const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n      const meta = dbState?.meta;\r\n      if (!meta) {\r\n        return db;\r\n      }\r\n\r\n      for (const storeData of meta) {\r\n        if (storeData.primaryPath === INDEXES_META_PRIMARY_KEY) {\r\n          continue;\r\n        }\r\n\r\n        await indexesStore.put({\r\n          [INDEXES_META_PRIMARY_KEY]: storeData.primaryPath,\r\n          keyPath: storeData.primaryPath,\r\n        });\r\n\r\n        const indexes = storeData.indexes;\r\n        for (const index of indexes) {\r\n          await indexesStore.put({\r\n            [INDEXES_META_PRIMARY_KEY]: index,\r\n            keyPath: index,\r\n          });\r\n        }\r\n      }\r\n\r\n      // clear meta after transaction went successfully\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, {\r\n        ...dataBaseState,\r\n        db,\r\n        meta: [],\r\n      });\r\n\r\n      return db;\r\n    },\r\n    collections: dbState\r\n      ? dbState.collections.concat(collectionName)\r\n      : [collectionName],\r\n    upgradeVersion: dbState ? dbState.upgradeVersion : 0,\r\n    changesCollectionName,\r\n    version,\r\n    meta,\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}