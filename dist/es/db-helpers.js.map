{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","INDEXES_META_COLLECTION_SUFFIX","INDEXES_META_PRIMARY_KEY","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","getIndexesMetaCollName","getDbPromise","createIdbDatabase","databaseName","collectionName","primaryPath","schema","console","log","metaDB","dbState","get","metaData","getFromIndex","reqMetaData","version","collections","dbName","updateNeeded","indexOf","indexes","forEach","idx","Array","isArray","push","newCollections","changesCollectionName","concat","map","coll","newDbState","getDb","Promise","resolve","dataBaseState","Error","db","upgrade","length","collectionData","store","createObjectStore","keyPath","idxName","createIndex","blocked","blocking","close","terminated","addEventListener","set","put","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState, IMetaDB } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { metadata } from \"core-js/fn/reflect\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\nexport const INDEXES_META_COLLECTION_SUFFIX = \"-idb-meta\";\r\nexport const INDEXES_META_PRIMARY_KEY = \"indexNameIdbMeta\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const getIndexesMetaCollName = (collName: string) => {\r\n  return collName + INDEXES_META_COLLECTION_SUFFIX;\r\n};\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n */\r\n\r\nlet getDbPromise: Promise<IDBPDatabase<unknown>>;\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  await getDbPromise;\r\n  console.log(\"DB NAME\");\r\n\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    const reqMetaData = await metaDB.getFromIndex(\r\n      \"dbMetaData\",\r\n      \"dbName\",\r\n      databaseName\r\n    );\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n      console.log(\"reqMetaData:\", reqMetaData);\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = metaData.collections.indexOf(collectionName) === -1;\r\n\r\n  const indexes: string | string[] = [];\r\n  if (schema.indexes) {\r\n    // TODO: compund indexes;\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n    });\r\n\r\n    // TODO: create one changes collection per database ?\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n    });\r\n\r\n    console.log(\"NEW COLLECTIONS!!!: \", newCollections);\r\n\r\n    metaData = {\r\n      ...metaData,\r\n      collections: metaData.collections.concat(\r\n        newCollections.map((coll) => {\r\n          return coll.collectionName;\r\n        })\r\n      ),\r\n    };\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    getDb: async () => {\r\n      getDbPromise = new Promise(async (resolve) => {\r\n        const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n        console.log(\"REQ DATBASE: \", [\r\n          ...(dataBaseState?.newCollections as any),\r\n        ]);\r\n        if (!dataBaseState) {\r\n          throw new Error(\"dataBase state is undefined\");\r\n        }\r\n\r\n        if (!dataBaseState.updateNeeded && dataBaseState.db) {\r\n          console.log(\"ALREADY EXISTS: \", [\r\n            ...(dataBaseState?.newCollections as any),\r\n          ]);\r\n          resolve(dataBaseState.db);\r\n        }\r\n\r\n        const metaData = dataBaseState.metaData;\r\n        if (dataBaseState.updateNeeded) {\r\n          metaData.version += 1;\r\n        }\r\n\r\n        // TODO: manage version change.\r\n        const db = await openDB(`${databaseName}.db`, metaData.version, {\r\n          async upgrade(db) {\r\n            const newCollections = dataBaseState.newCollections;\r\n            console.log(\"NEW COLLECTIONS:\", newCollections);\r\n            if (!newCollections.length) {\r\n              return;\r\n            }\r\n            for (const collectionData of newCollections) {\r\n              /**\r\n               * Construct loki indexes from RxJsonSchema indexes.\r\n               * TODO what about compound indexes?\r\n               */\r\n              const store = db.createObjectStore(\r\n                collectionData.collectionName,\r\n                {\r\n                  keyPath: collectionData.primaryPath,\r\n                }\r\n              );\r\n\r\n              collectionData.indexes.forEach((idxName) => {\r\n                // FIXME\r\n                store.createIndex(idxName as string, idxName);\r\n              });\r\n            }\r\n          },\r\n          blocked() {\r\n            // alert(\"Please close all other tabs with this site open!\");\r\n          },\r\n          blocking() {\r\n            // Make sure to add a handler to be notified if another page requests a version\r\n            // change. We must close the database. This allows the other page to upgrade the database.\r\n            // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n            //\r\n            db.close();\r\n            // alert(\r\n            //   \"A new version of this page is ready. Please reload or close this tab!\"\r\n            // );\r\n          },\r\n          terminated() {},\r\n        });\r\n\r\n        db.addEventListener(\"versionchange\", () => {\r\n          console.log(\"versionchange fired\");\r\n        });\r\n\r\n        // const indexesStore = db.transaction(\r\n        //   getIndexesMetaCollName(collectionName),\r\n        //   \"readwrite\"\r\n        // ).store;\r\n\r\n        /**\r\n         * Store meta data about index\r\n         * Use it later to understand what index to use to query data\r\n         *\r\n         */\r\n\r\n        // const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n        // const meta = dbState?.meta;\r\n        // if (!meta) {\r\n        //   return db;\r\n        // }\r\n\r\n        // for (const storeData of meta) {\r\n        //   if (storeData.primaryPath === INDEXES_META_PRIMARY_KEY) {\r\n        //     continue;\r\n        //   }\r\n\r\n        //   await indexesStore.put({\r\n        //     [INDEXES_META_PRIMARY_KEY]: storeData.primaryPath,\r\n        //     keyPath: storeData.primaryPath,\r\n        //   });\r\n\r\n        //   const indexes = storeData.indexes;\r\n        //   for (const index of indexes) {\r\n        //     await indexesStore.put({\r\n        //       [INDEXES_META_PRIMARY_KEY]: index,\r\n        //       keyPath: index,\r\n        //     });\r\n        //   }\r\n        // }\r\n\r\n        // clear meta after transaction went successfully\r\n        IDB_DATABASE_STATE_BY_NAME.set(databaseName, {\r\n          ...dataBaseState,\r\n          db,\r\n          newCollections: [],\r\n          metaData,\r\n        });\r\n\r\n        await metaDB.put(\"dbMetaData\", metaData);\r\n\r\n        resolve(db);\r\n      });\r\n\r\n      return getDbPromise;\r\n    },\r\n    changesCollectionName,\r\n    metaData,\r\n    updateNeeded,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}