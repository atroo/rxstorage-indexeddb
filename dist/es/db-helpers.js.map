{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","genIndexName","index","Array","isArray","join","getDbPromise","createIdbDatabase","databaseName","collectionName","primaryPath","schema","metaDB","dbState","get","metaData","getFromIndex","reqMetaData","version","collections","dbName","updateNeeded","foundCol","find","col","name","console","log","indexes","forEach","idx","push","newCollections","changesCollectionName","newDbState","getDb","deleteCollections","Promise","resolve","dataBaseState","trace","Error","db","upgrade","length","collectionData","indexOf","store","createObjectStore","keyPath","createIndex","error","colName","deleteObjectStore","blocking","close","terminated","indexedColsStore","transaction","collData","put","collection","value","concat","map","coll","set","removeCollection","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { deleteDB, IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n * TODO: handle properly primaryPath.\r\n */\r\n\r\nlet getDbPromise: Promise<IDBPDatabase<unknown>>;\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  // in order to avoid race conditions make user wait until\r\n  // connection is established if somebody request db before\r\n  await getDbPromise;\r\n\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    // Store \"version\" data in seperate db to properly handle indexeddb version update.\r\n    const reqMetaData = await metaDB.getFromIndex(\r\n      \"dbMetaData\",\r\n      \"dbName\",\r\n      databaseName\r\n    );\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = true;\r\n  const foundCol = metaData.collections.find(\r\n    (col) => col.name === collectionName\r\n  );\r\n  if (foundCol) {\r\n    updateNeeded = false;\r\n  }\r\n\r\n  if (foundCol) {\r\n    console.log(\r\n      \"Tries to add same collection\",\r\n      `${collectionName}: ${schema.version}`\r\n    );\r\n  }\r\n\r\n  const indexes: string | string[] = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n      version: schema.version,\r\n    });\r\n\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n      version: 1,\r\n    });\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    ...dbState,\r\n    getDb: async (deleteCollections?: string[]) => {\r\n      await getDbPromise;\r\n      getDbPromise = new Promise(async (resolve) => {\r\n        const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n        if (!dataBaseState) {\r\n          console.trace(\"no db state\");\r\n          throw new Error(\"dataBase state is undefined\");\r\n        }\r\n\r\n        if (!dataBaseState.updateNeeded && dataBaseState.db) {\r\n          return resolve(dataBaseState.db);\r\n        }\r\n\r\n        const metaData = dataBaseState.metaData;\r\n        if (dataBaseState.updateNeeded) {\r\n          metaData.version += 1;\r\n        }\r\n\r\n        const newCollections = dataBaseState.newCollections;\r\n\r\n        const db = await openDB(databaseName, metaData.version, {\r\n          async upgrade(db) {\r\n            if (!newCollections.length) {\r\n              return;\r\n            }\r\n            for (const collectionData of newCollections) {\r\n              if (\r\n                deleteCollections &&\r\n                deleteCollections.indexOf(collectionData.collectionName) >= 0\r\n              ) {\r\n                continue;\r\n              }\r\n\r\n              try {\r\n                const store = db.createObjectStore(\r\n                  collectionData.collectionName,\r\n                  {\r\n                    keyPath: collectionData.primaryPath,\r\n                  }\r\n                );\r\n\r\n                collectionData.indexes.forEach((index) => {\r\n                  store.createIndex(genIndexName(index), index);\r\n                });\r\n              } catch (error) {\r\n                console.log(error);\r\n                console.log(\"STORE EXISTS: \", collectionData.collectionName);\r\n              }\r\n\r\n              if (deleteCollections) {\r\n                for (const colName of deleteCollections) {\r\n                  db.deleteObjectStore(colName);\r\n                }\r\n              }\r\n            }\r\n          },\r\n          blocking() {\r\n            // Make sure to add a handler to be notified if another page requests a version\r\n            // change. We must close the database. This allows the other page to upgrade the database.\r\n            // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n            //\r\n            db.close();\r\n          },\r\n          terminated() {},\r\n        });\r\n\r\n        /**\r\n         * Store meta data about indexes\r\n         * Use it later to understand what index to use to query data\r\n         *\r\n         */\r\n        if (newCollections.length) {\r\n          const indexedColsStore = metaDB.transaction(\r\n            \"indexedCols\",\r\n            \"readwrite\"\r\n          ).store;\r\n\r\n          for (const collData of newCollections) {\r\n            const indexes = collData.indexes;\r\n            indexes.forEach((index) => {\r\n              indexedColsStore.put({\r\n                dbName: databaseName,\r\n                collection: collData.collectionName,\r\n                name: genIndexName(index),\r\n                value: index,\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        // clear newCollections transaction went successfully\r\n        const newDbState: BrowserStorageState = {\r\n          ...dataBaseState,\r\n          updateNeeded: false,\r\n          db,\r\n          newCollections: [],\r\n          metaData: {\r\n            ...dataBaseState.metaData,\r\n            collections: metaData.collections.concat(\r\n              newCollections.map((coll) => {\r\n                return { name: coll.collectionName, version: coll.version };\r\n              })\r\n            ),\r\n          },\r\n        };\r\n\r\n        await metaDB.put(\"dbMetaData\", newDbState.metaData);\r\n        IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n        resolve(db);\r\n      });\r\n\r\n      return getDbPromise;\r\n    },\r\n    removeCollection: async () => {\r\n      console.log(\"WILL remove store: \", databaseName);\r\n      await getDbPromise;\r\n      const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n      if (!dataBaseState) {\r\n        // TODO: less descriptive error in prod.\r\n        throw new Error(\"deleteDb: dataBase state is undefined\");\r\n      }\r\n\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, {\r\n        ...dataBaseState,\r\n        updateNeeded: true,\r\n      });\r\n\r\n      return dataBaseState.getDb([\r\n        collectionName,\r\n        getChangesCollName(collectionName),\r\n      ]);\r\n    },\r\n    metaData,\r\n    updateNeeded,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}