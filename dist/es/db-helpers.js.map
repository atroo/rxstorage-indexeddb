{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","genIndexName","index","Array","isArray","join","lock","AsyncLock","createIdbDatabase","databaseName","collectionName","primaryPath","schema","metaDB","dbState","get","metaData","reqMetaData","version","collections","dbName","updateNeeded","foundCol","find","col","name","indexes","forEach","idx","push","newCollections","changesCollectionName","newDbState","getDb","deleteCollections","acquire","dataBaseState","getDatabaseState","length","db","upgrade","collectionData","store","createObjectStore","keyPath","createIndex","colName","deleteObjectStore","blocking","close","terminated","indexedColsStore","transaction","collData","reqIndexesMeta","indexesMeta","collection","value","primary","put","metaDataCollections","concat","map","coll","filter","indexOf","locked","undefined","set","removeCollection","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage","Error"],"mappings":"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","sourcesContent":["import { deleteDB, IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport {\r\n  BrowserStorageState,\r\n  IMetaDB,\r\n  Index,\r\n} from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { validateIndexValues } from \"./utils\";\r\nimport AsyncLock from \"async-lock\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\nconst lock = new AsyncLock();\r\n\r\n/**\r\n * Can be called several times for the same db\r\n * Save all new collections data in map and run migration once db requessted (getDb)\r\n *\r\n * @param databaseName\r\n * @param collectionName\r\n * @param primaryPath\r\n * @param schema\r\n * @returns\r\n */\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    // Store \"version\" data in seperate db to properly handle indexeddb version update.\r\n    const reqMetaData = await metaDB.get(\"dbMetaData\", databaseName);\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = true;\r\n  const foundCol = metaData.collections.find(\r\n    (col) => col.name === collectionName\r\n  );\r\n  if (foundCol) {\r\n    updateNeeded = false;\r\n  }\r\n\r\n  const indexes: Array<string | string[]> = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!validateIndexValues(idx)) {\r\n        return;\r\n      }\r\n\r\n      indexes.push(idx as string | string[]);\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n      version: schema.version,\r\n    });\r\n\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n      version: 1,\r\n    });\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    ...dbState,\r\n    getDb: async (deleteCollections: string[] = []) => {\r\n      // lock db request.\r\n      // without lock somebody else can request database while idb update is still running.\r\n      // this will lead to unexpected results\r\n      return lock.acquire(databaseName, async () => {\r\n        const dataBaseState = getDatabaseState(databaseName);\r\n\r\n        const newCollections = dataBaseState.newCollections;\r\n        const updateNeeded =\r\n          newCollections.length > 0 || deleteCollections.length > 0;\r\n\r\n        if (!updateNeeded && dataBaseState.db) {\r\n          return dataBaseState.db;\r\n        }\r\n\r\n        const metaData = dataBaseState.metaData;\r\n        if (updateNeeded) {\r\n          metaData.version += 1;\r\n        }\r\n\r\n        const db = await openDB(databaseName, metaData.version, {\r\n          upgrade(db) {\r\n            for (const collectionData of newCollections) {\r\n              const store = db.createObjectStore(\r\n                collectionData.collectionName,\r\n                {\r\n                  keyPath: collectionData.primaryPath,\r\n                }\r\n              );\r\n\r\n              collectionData.indexes.forEach((index) => {\r\n                store.createIndex(genIndexName(index), index);\r\n              });\r\n            }\r\n\r\n            for (const colName of deleteCollections) {\r\n              db.deleteObjectStore(colName);\r\n            }\r\n          },\r\n          blocking() {\r\n            // Make sure to add a handler to be notified if another page requests a version\r\n            // change. We must close the database. This allows the other page to upgrade the database.\r\n            // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n            //\r\n            db.close();\r\n          },\r\n          terminated() {},\r\n        });\r\n\r\n        /**\r\n         * Store meta data about indexes\r\n         * Use it later to understand what index to use to query data\r\n         *\r\n         */\r\n        if (newCollections.length) {\r\n          const indexedColsStore = metaDB.transaction(\r\n            \"indexedCols\",\r\n            \"readwrite\"\r\n          ).store;\r\n\r\n          for (const collData of newCollections) {\r\n            const reqIndexesMeta = await indexedColsStore.get([\r\n              databaseName,\r\n              collData.collectionName,\r\n            ]);\r\n            const indexesMeta: IMetaDB[\"indexedCols\"][\"value\"] = reqIndexesMeta\r\n              ? reqIndexesMeta\r\n              : {\r\n                  dbName: databaseName,\r\n                  collection: collData.collectionName,\r\n                  indexes: [],\r\n                };\r\n\r\n            const indexes = collData.indexes;\r\n            indexes.forEach((index) => {\r\n              indexesMeta.indexes.push({\r\n                name: genIndexName(index),\r\n                value: index,\r\n              });\r\n            });\r\n            // primary also can be counted as indexedData, but it should be handled differently.\r\n            // use \"primary to dect that it is actually \"primary\" field.\r\n            indexesMeta.indexes.push({\r\n              name: collData.primaryPath,\r\n              value: collData.primaryPath,\r\n              primary: true,\r\n            });\r\n\r\n            indexedColsStore.put(indexesMeta);\r\n          }\r\n        }\r\n\r\n        let metaDataCollections = metaData.collections.concat(\r\n          newCollections.map((coll) => {\r\n            return { name: coll.collectionName, version: coll.version };\r\n          })\r\n        );\r\n\r\n        /**\r\n         * exclude deleted collections from meta.\r\n         */\r\n        if (deleteCollections) {\r\n          metaDataCollections = metaDataCollections.filter((coll) => {\r\n            return deleteCollections.indexOf(coll.name) === -1;\r\n          });\r\n\r\n          for (const colName of deleteCollections) {\r\n            /**\r\n             * also delete indexes meta along with store. they're not needed anymore\r\n             * DO NOT do this via \"upgrade\" callback as upgrade transaction can be finish while\r\n             * indexes meta being removed\r\n             */\r\n            await metaDB.delete(\"indexedCols\", [databaseName, colName]);\r\n          }\r\n        }\r\n\r\n        // transaction went successfully. clear \"newCollections\"\r\n        const newDbState: BrowserStorageState = {\r\n          ...dataBaseState,\r\n          db,\r\n          newCollections: [],\r\n          metaData: {\r\n            ...dataBaseState.metaData,\r\n            collections: metaDataCollections,\r\n          },\r\n          locked: undefined,\r\n        };\r\n\r\n        await metaDB.put(\"dbMetaData\", newDbState.metaData);\r\n        IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n        return db;\r\n      });\r\n    },\r\n    removeCollection: async () => {\r\n      const dataBaseState = getDatabaseState(databaseName);\r\n      return dataBaseState.getDb([\r\n        collectionName,\r\n        getChangesCollName(collectionName),\r\n      ]);\r\n    },\r\n    metaData,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): string {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key as string;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n\r\nexport const getDatabaseState = (databaseName: string) => {\r\n  const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (!dataBaseState) {\r\n    throw new Error(\"dataBase state is undefined\");\r\n  }\r\n\r\n  return dataBaseState;\r\n};\r\n"],"file":"db-helpers.js"}