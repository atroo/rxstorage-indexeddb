{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","genIndexName","index","Array","isArray","join","getDbPromise","createIdbDatabase","databaseName","collectionName","primaryPath","schema","metaDB","dbState","get","metaData","getFromIndex","reqMetaData","version","collections","dbName","updateNeeded","foundCol","find","col","name","indexes","forEach","idx","push","newCollections","changesCollectionName","newDbState","getDb","deleteCollections","Promise","resolve","dataBaseState","console","trace","Error","db","upgrade","length","collectionData","indexOf","log","store","createObjectStore","keyPath","createIndex","colName","deleteObjectStore","blocking","close","terminated","indexedColsStore","transaction","collData","put","collection","value","concat","map","coll","set","removeCollection","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { deleteDB, IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n * TODO: handle properly primaryPath.\r\n */\r\n\r\nlet getDbPromise: Promise<IDBPDatabase<unknown>>;\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  // in order to avoid race conditions make user wait until\r\n  // connection is established if somebody request db before\r\n  await getDbPromise;\r\n\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    // Store \"version\" data in seperate db to properly handle indexeddb version update.\r\n    const reqMetaData = await metaDB.getFromIndex(\r\n      \"dbMetaData\",\r\n      \"dbName\",\r\n      databaseName\r\n    );\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = true;\r\n  const foundCol = metaData.collections.find(\r\n    (col) => col.name === collectionName\r\n  );\r\n  if (foundCol) {\r\n    updateNeeded = false;\r\n  }\r\n\r\n  const indexes: string | string[] = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n      version: schema.version,\r\n    });\r\n\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n      version: 1,\r\n    });\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    ...dbState,\r\n    getDb: async (deleteCollections?: string[]) => {\r\n      await getDbPromise;\r\n      getDbPromise = new Promise(async (resolve) => {\r\n        const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n        if (!dataBaseState) {\r\n          console.trace(\"no db state\");\r\n          throw new Error(\"dataBase state is undefined\");\r\n        }\r\n\r\n        if (!dataBaseState.updateNeeded && dataBaseState.db) {\r\n          return resolve(dataBaseState.db);\r\n        }\r\n\r\n        const metaData = dataBaseState.metaData;\r\n        if (dataBaseState.updateNeeded) {\r\n          metaData.version += 1;\r\n        }\r\n\r\n        const newCollections = dataBaseState.newCollections;\r\n\r\n        const db = await openDB(databaseName, metaData.version, {\r\n          async upgrade(db) {\r\n            if (!newCollections.length && !deleteCollections?.length) {\r\n              return;\r\n            }\r\n            for (const collectionData of newCollections) {\r\n              if (\r\n                deleteCollections &&\r\n                deleteCollections.indexOf(collectionData.collectionName) >= 0\r\n              ) {\r\n                continue;\r\n              }\r\n\r\n              console.log(\r\n                \"will add collection: \",\r\n                collectionData.collectionName\r\n              );\r\n\r\n              const store = db.createObjectStore(\r\n                collectionData.collectionName,\r\n                {\r\n                  keyPath: collectionData.primaryPath,\r\n                }\r\n              );\r\n\r\n              collectionData.indexes.forEach((index) => {\r\n                store.createIndex(genIndexName(index), index);\r\n              });\r\n            }\r\n\r\n            if (deleteCollections) {\r\n              console.log(\"Will delete collections: \", deleteCollections);\r\n              for (const colName of deleteCollections) {\r\n                db.deleteObjectStore(colName);\r\n              }\r\n            }\r\n          },\r\n          blocking() {\r\n            // Make sure to add a handler to be notified if another page requests a version\r\n            // change. We must close the database. This allows the other page to upgrade the database.\r\n            // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n            //\r\n            db.close();\r\n          },\r\n          terminated() {},\r\n        });\r\n\r\n        /**\r\n         * Store meta data about indexes\r\n         * Use it later to understand what index to use to query data\r\n         *\r\n         */\r\n        if (newCollections.length) {\r\n          const indexedColsStore = metaDB.transaction(\r\n            \"indexedCols\",\r\n            \"readwrite\"\r\n          ).store;\r\n\r\n          for (const collData of newCollections) {\r\n            const indexes = collData.indexes;\r\n            indexes.forEach((index) => {\r\n              indexedColsStore.put({\r\n                dbName: databaseName,\r\n                collection: collData.collectionName,\r\n                name: genIndexName(index),\r\n                value: index,\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        // clear newCollections transaction went successfully\r\n        const newDbState: BrowserStorageState = {\r\n          ...dataBaseState,\r\n          updateNeeded: false,\r\n          db,\r\n          newCollections: [],\r\n          metaData: {\r\n            ...dataBaseState.metaData,\r\n            collections: metaData.collections.concat(\r\n              newCollections.map((coll) => {\r\n                return { name: coll.collectionName, version: coll.version };\r\n              })\r\n            ),\r\n          },\r\n        };\r\n\r\n        await metaDB.put(\"dbMetaData\", newDbState.metaData);\r\n        IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n        resolve(db);\r\n      });\r\n\r\n      return getDbPromise;\r\n    },\r\n    removeCollection: async () => {\r\n      await getDbPromise;\r\n      const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n      if (!dataBaseState) {\r\n        // TODO: less descriptive error in prod.\r\n        throw new Error(\"deleteDb: dataBase state is undefined\");\r\n      }\r\n\r\n      IDB_DATABASE_STATE_BY_NAME.set(databaseName, {\r\n        ...dataBaseState,\r\n        updateNeeded: true,\r\n      });\r\n\r\n      console.log(\"WILL REMOVE COLLS: \", collectionName);\r\n      return dataBaseState.getDb([\r\n        collectionName,\r\n        getChangesCollName(collectionName),\r\n      ]);\r\n    },\r\n    metaData,\r\n    updateNeeded,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}