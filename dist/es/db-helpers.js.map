{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","storesData","openedDb","getIdbDatabase","databaseName","collectionName","primaryPath","schema","console","log","dbState","get","version","newCollectionAdded","collections","indexOf","upgradeVersion","indexes","forEach","idx","Array","isArray","push","changesCollectionName","newDbState","getDb","upgrade","db","storeData","store","createObjectStore","keyPath","idxName","createIndex","blocked","alert","blocking","close","terminated","concat","set","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n */\r\n\r\n// poc\r\nconst storesData: any[] = [];\r\nlet openedDb: IDBPDatabase<unknown>;\r\n\r\nexport const getIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  console.log(\"DB NAME\");\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  let version = schema.version + 1;\r\n  if (dbState) {\r\n    const newCollectionAdded =\r\n      dbState.collections.indexOf(collectionName) === -1;\r\n    if (newCollectionAdded) {\r\n      dbState.upgradeVersion += 1;\r\n    }\r\n\r\n    version += dbState.upgradeVersion;\r\n\r\n    if (dbState.version === version) {\r\n      /**\r\n       * nothing has changed. no need to create new connection\r\n       */\r\n      return dbState;\r\n    } else {\r\n      console.log(\"db name: \", databaseName);\r\n      console.log(\"col name: \", collectionName);\r\n      console.log(\"primary path: \", primaryPath);\r\n      console.log(\"schema: \", schema);\r\n      console.log(\"---------------------\");\r\n      // dbState.db.close();\r\n    }\r\n  }\r\n\r\n  const indexes: string[] = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const changesCollectionName = collectionName + CHANGES_COLLECTION_SUFFIX;\r\n\r\n  storesData.push({\r\n    collectionName,\r\n    primaryPath,\r\n    indexes,\r\n  });\r\n\r\n  /** should I created this only once or for every db?? */\r\n  storesData.push({\r\n    collectionName: changesCollectionName,\r\n    primaryPath: \"eventId\",\r\n    indexes: [\"sequence\"],\r\n  });\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    getDb: async () => {\r\n      if (openedDb) {\r\n        return openedDb;\r\n      }\r\n\r\n      const db = await openDB(`${databaseName}.db`, 1, {\r\n        upgrade(db) {\r\n          console.log(\"storesData:\", storesData);\r\n          for (const storeData of storesData) {\r\n            /**\r\n             * Construct loki indexes from RxJsonSchema indexes.\r\n             * TODO what about compound indexes?\r\n             */\r\n            const store = db.createObjectStore(storeData.collectionName, {\r\n              keyPath: storeData.primaryPath,\r\n            });\r\n\r\n            storeData.indexes.forEach((idxName: string) => {\r\n              store.createIndex(idxName, idxName);\r\n            });\r\n          }\r\n\r\n          // const store = db.createObjectStore(collectionName, {\r\n          //   keyPath: primaryPath,\r\n          // });\r\n\r\n          // const indices: string[] = [];\r\n          // if (schema.indexes) {\r\n          //   schema.indexes.forEach((idx) => {\r\n          //     if (!Array.isArray(idx)) {\r\n          //       indices.push(idx);\r\n          //     }\r\n          //   });\r\n          // }\r\n\r\n          // indices.forEach((idxName) => {\r\n          //   store.createIndex(idxName, idxName);\r\n          // });\r\n\r\n          // const changesStore = db.createObjectStore(changesCollectionName, {\r\n          //   keyPath: \"eventId\",\r\n          // });\r\n          // changesStore.createIndex(\"sequence\", \"sequence\");\r\n        },\r\n        blocked() {\r\n          alert(\"Please close all other tabs with this site open!\");\r\n        },\r\n        blocking() {\r\n          // Make sure to add a handler to be notified if another page requests a version\r\n          // change. We must close the database. This allows the other page to upgrade the database.\r\n          // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n          //\r\n          db.close();\r\n          alert(\r\n            \"A new version of this page is ready. Please reload or close this tab!\"\r\n          );\r\n        },\r\n        terminated() {},\r\n      });\r\n\r\n      openedDb = db;\r\n\r\n      return openedDb;\r\n    },\r\n    collections: dbState\r\n      ? dbState.collections.concat(collectionName)\r\n      : [collectionName],\r\n    upgradeVersion: dbState ? dbState.upgradeVersion : 0,\r\n    changesCollectionName,\r\n    version,\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}