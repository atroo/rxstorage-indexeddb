{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_NAME","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","genIndexName","index","Array","isArray","join","getDbName","dbName","collectionName","lock","AsyncLock","createIdbDatabase","settings","indexes","schema","forEach","idx","push","newCollections","primaryPath","databaseName","upgrade","db","collectionData","store","createObjectStore","keyPath","createIndex","blocking","idbSettings","close","terminated","metaDB","indexedColsStore","transaction","collData","get","reqIndexesMeta","indexesMeta","collection","name","value","primary","put","state","_db","getDb","removeDb","set","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage","getDatabaseState","dataBaseState","Error"],"mappings":"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","sourcesContent":["import { deleteDB, IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport {\r\n  BrowserStorageState,\r\n  IMetaDB,\r\n  Index,\r\n} from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { validateIndexValues } from \"./utils\";\r\nimport AsyncLock from \"async-lock\";\r\nimport { IdbSettings } from \"./types\";\r\n\r\nexport const CHANGES_COLLECTION_NAME = \"rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = () => {\r\n  return CHANGES_COLLECTION_NAME;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\nexport const getDbName = (dbName: string, collectionName: string) => {\r\n  return `${dbName}-${collectionName}`;\r\n};\r\n\r\nconst lock = new AsyncLock();\r\n\r\n/**\r\n * Can be called several times for the same db\r\n * Save all new collections data in map and run migration once db requessted (getDb)\r\n *\r\n * @param databaseName\r\n * @param collectionName\r\n * @param primaryPath\r\n * @param schema\r\n * @returns\r\n */\r\n\r\nexport const createIdbDatabase = async <RxDocType>(settings: {\r\n  databaseName: string;\r\n  collectionName: string;\r\n  primaryPath: string;\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">;\r\n  idbSettings: IdbSettings;\r\n}) => {\r\n  const indexes: Array<string | string[]> = [];\r\n  if (settings.schema.indexes) {\r\n    settings.schema.indexes.forEach((idx) => {\r\n      if (!validateIndexValues(idx)) {\r\n        return;\r\n      }\r\n\r\n      indexes.push(idx as string | string[]);\r\n    });\r\n  }\r\n\r\n  const newCollections = [\r\n    {\r\n      collectionName: settings.collectionName,\r\n      primaryPath: settings.primaryPath,\r\n      indexes,\r\n    },\r\n    {\r\n      collectionName: CHANGES_COLLECTION_NAME,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n    },\r\n  ];\r\n\r\n  const dbName = getDbName(settings.databaseName, settings.collectionName);\r\n\r\n  const db = await openDB(dbName, 1, {\r\n    upgrade(db) {\r\n      for (const collectionData of newCollections) {\r\n        const store = db.createObjectStore(collectionData.collectionName, {\r\n          keyPath: collectionData.primaryPath,\r\n        });\r\n\r\n        collectionData.indexes.forEach((index) => {\r\n          store.createIndex(genIndexName(index), index);\r\n        });\r\n      }\r\n    },\r\n    blocking() {\r\n      // Make sure to add a handler to be notified if another page requests a version\r\n      // change. We must close the database. This allows the other page to upgrade the database.\r\n      // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n      //\r\n      settings.idbSettings.blocking?.();\r\n      db.close();\r\n    },\r\n    terminated() {},\r\n  });\r\n\r\n  /**\r\n   * Store meta data about indexes\r\n   * Use it later to understand what index to use to query data\r\n   *\r\n   */\r\n  const metaDB = await getDbMeta();\r\n  const indexedColsStore = metaDB.transaction(\"indexedCols\", \"readwrite\").store;\r\n\r\n  for (const collData of newCollections) {\r\n    const reqIndexesMeta = await indexedColsStore.get([\r\n      settings.databaseName,\r\n      collData.collectionName,\r\n    ]);\r\n    const indexesMeta: IMetaDB[\"indexedCols\"][\"value\"] = reqIndexesMeta\r\n      ? reqIndexesMeta\r\n      : {\r\n          dbName: settings.databaseName,\r\n          collection: collData.collectionName,\r\n          indexes: [],\r\n        };\r\n\r\n    const indexes = collData.indexes;\r\n    indexes.forEach((index) => {\r\n      indexesMeta.indexes.push({\r\n        name: genIndexName(index),\r\n        value: index,\r\n      });\r\n    });\r\n    // primary also can be counted as indexedData, but it should be handled differently.\r\n    // use \"primary to dect that it is actually \"primary\" field.\r\n    indexesMeta.indexes.push({\r\n      name: collData.primaryPath,\r\n      value: collData.primaryPath,\r\n      primary: true,\r\n    });\r\n\r\n    indexedColsStore.put(indexesMeta);\r\n  }\r\n\r\n  const state: BrowserStorageState = {\r\n    _db: db,\r\n    getDb() {\r\n      return db;\r\n    },\r\n    removeDb() {\r\n      return deleteDB(dbName);\r\n    },\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(dbName, state);\r\n\r\n  return state;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): string {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key as string;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n\r\nexport const getDatabaseState = (databaseName: string) => {\r\n  const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (!dataBaseState) {\r\n    throw new Error(\"dataBase state is undefined\");\r\n  }\r\n\r\n  return dataBaseState;\r\n};\r\n"],"file":"db-helpers.js"}