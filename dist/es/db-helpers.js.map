{"version":3,"sources":["../../src/db-helpers.ts"],"names":["CHANGES_COLLECTION_SUFFIX","IDB_DATABASE_STATE_BY_NAME","Map","getChangesCollName","collName","genIndexName","index","Array","isArray","join","getDbPromise","createIdbDatabase","databaseName","collectionName","primaryPath","schema","metaDB","dbState","get","metaData","getFromIndex","reqMetaData","console","log","version","collections","dbName","updateNeeded","indexOf","indexes","forEach","idx","push","newCollections","changesCollectionName","newDbState","getDb","Promise","resolve","dataBaseState","Error","db","upgrade","length","collectionData","store","createObjectStore","keyPath","createIndex","blocked","blocking","close","terminated","addEventListener","indexedColsStore","transaction","collData","put","collection","name","value","concat","map","coll","set","getPrimaryFieldOfPrimaryKey","primaryKey","key","newRxError","code","parameters","RxError","overwritable","tunnelErrorMessage"],"mappings":"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","sourcesContent":["import { IDBPDatabase, openDB } from \"idb\";\r\nimport { overwritable, RxJsonSchema } from \"rxdb\";\r\nimport {\r\n  CompositePrimaryKey,\r\n  PrimaryKey,\r\n  RxErrorKey,\r\n  RxErrorParameters,\r\n} from \"rxdb/dist/types/types\";\r\nimport { BrowserStorageState } from \"./types/browser-storeage-state\";\r\nimport { RxError } from \"./rx-error\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\n\r\nexport const CHANGES_COLLECTION_SUFFIX = \"-rxdb-changes\";\r\n\r\nexport const IDB_DATABASE_STATE_BY_NAME: Map<string, BrowserStorageState> =\r\n  new Map();\r\n\r\nexport const getChangesCollName = (collName: string) => {\r\n  return collName + CHANGES_COLLECTION_SUFFIX;\r\n};\r\n\r\nexport const genIndexName = (index: string | string[]) => {\r\n  if (Array.isArray(index)) {\r\n    return index.join(\".\");\r\n  }\r\n\r\n  return index;\r\n};\r\n\r\n/**\r\n * TODO: migrations\r\n * 1) Before updating store we need to copy all data to somewhere else.\r\n * 2) Created new store.\r\n * 3) Put old data to new store.\r\n *\r\n * TODO: \"close\" notifications ?\r\n * TODO: handle properly primaryPath.\r\n * TODO: put primaryKey in index ?\r\n */\r\n\r\nlet getDbPromise: Promise<IDBPDatabase<unknown>>;\r\n\r\nexport const createIdbDatabase = async <RxDocType>(\r\n  databaseName: string,\r\n  collectionName: string,\r\n  primaryPath: string,\r\n  schema: Pick<RxJsonSchema<RxDocType>, \"indexes\" | \"version\">\r\n) => {\r\n  await getDbPromise;\r\n\r\n  const metaDB = await getDbMeta();\r\n  let metaData: BrowserStorageState[\"metaData\"];\r\n  const dbState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n  if (dbState?.metaData) {\r\n    metaData = dbState.metaData;\r\n  } else {\r\n    const reqMetaData = await metaDB.getFromIndex(\r\n      \"dbMetaData\",\r\n      \"dbName\",\r\n      databaseName\r\n    );\r\n    if (reqMetaData) {\r\n      metaData = reqMetaData;\r\n      console.log(\"reqMetaData:\", reqMetaData);\r\n    } else {\r\n      metaData = {\r\n        version: 0,\r\n        collections: [],\r\n        dbName: databaseName,\r\n      };\r\n    }\r\n  }\r\n\r\n  let updateNeeded = metaData.collections.indexOf(collectionName) === -1;\r\n\r\n  const indexes: string | string[] = [];\r\n  if (schema.indexes) {\r\n    schema.indexes.forEach((idx) => {\r\n      if (!Array.isArray(idx)) {\r\n        indexes.push(idx);\r\n      }\r\n    });\r\n  }\r\n\r\n  const newCollections: BrowserStorageState[\"newCollections\"] = [];\r\n  const changesCollectionName = getChangesCollName(collectionName);\r\n\r\n  if (updateNeeded) {\r\n    newCollections.push({\r\n      collectionName,\r\n      primaryPath,\r\n      indexes,\r\n    });\r\n\r\n    // TODO: create one changes collection per database ?\r\n    newCollections.push({\r\n      collectionName: changesCollectionName,\r\n      primaryPath: \"eventId\",\r\n      indexes: [\"sequence\"],\r\n    });\r\n\r\n    console.log(\"NEW COLLECTIONS!!!: \", newCollections);\r\n  }\r\n\r\n  const newDbState: BrowserStorageState = {\r\n    ...dbState,\r\n    getDb: async () => {\r\n      getDbPromise = new Promise(async (resolve) => {\r\n        const dataBaseState = IDB_DATABASE_STATE_BY_NAME.get(databaseName);\r\n        if (!dataBaseState) {\r\n          throw new Error(\"dataBase state is undefined\");\r\n        }\r\n\r\n        if (!dataBaseState.updateNeeded && dataBaseState.db) {\r\n          return resolve(dataBaseState.db);\r\n        }\r\n\r\n        const metaData = dataBaseState.metaData;\r\n        if (dataBaseState.updateNeeded) {\r\n          metaData.version += 1;\r\n        }\r\n\r\n        const newCollections = dataBaseState.newCollections;\r\n\r\n        const db = await openDB(databaseName, metaData.version, {\r\n          async upgrade(db) {\r\n            if (!newCollections.length) {\r\n              return;\r\n            }\r\n            for (const collectionData of newCollections) {\r\n              /**\r\n               * Construct loki indexes from RxJsonSchema indexes.\r\n               * TODO what about compound indexes?\r\n               */\r\n              const store = db.createObjectStore(\r\n                collectionData.collectionName,\r\n                {\r\n                  keyPath: collectionData.primaryPath,\r\n                }\r\n              );\r\n\r\n              collectionData.indexes.forEach((index) => {\r\n                store.createIndex(genIndexName(index), index);\r\n              });\r\n            }\r\n          },\r\n          blocked() {\r\n            // alert(\"Please close all other tabs with this site open!\");\r\n          },\r\n          blocking() {\r\n            // Make sure to add a handler to be notified if another page requests a version\r\n            // change. We must close the database. This allows the other page to upgrade the database.\r\n            // If you don't do this then the upgrade won't happen until the user closes the tab.\r\n            //\r\n            db.close();\r\n          },\r\n          terminated() {},\r\n        });\r\n\r\n        db.addEventListener(\"versionchange\", () => {\r\n          console.log(\"versionchange fired\");\r\n        });\r\n\r\n        /**\r\n         * Store meta data about indexes\r\n         * Use it later to understand what index to use to query data\r\n         *\r\n         */\r\n        if (newCollections.length) {\r\n          const indexedColsStore = metaDB.transaction(\r\n            \"indexedCols\",\r\n            \"readwrite\"\r\n          ).store;\r\n\r\n          for (const collData of newCollections) {\r\n            const indexes = collData.indexes;\r\n            indexes.forEach((index) => {\r\n              console.log(\"INDEX: \", index);\r\n              indexedColsStore.put({\r\n                dbName: databaseName,\r\n                collection: collData.collectionName,\r\n                name: genIndexName(index),\r\n                value: index,\r\n              });\r\n            });\r\n          }\r\n        }\r\n\r\n        // clear newCollections transaction went successfully\r\n        const newDbState: BrowserStorageState = {\r\n          ...dataBaseState,\r\n          updateNeeded: false,\r\n          db,\r\n          newCollections: [],\r\n          metaData: {\r\n            ...dataBaseState.metaData,\r\n            collections: metaData.collections.concat(\r\n              newCollections.map((coll) => {\r\n                return coll.collectionName;\r\n              })\r\n            ),\r\n          },\r\n        };\r\n\r\n        await metaDB.put(\"dbMetaData\", newDbState.metaData);\r\n        IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n        resolve(db);\r\n      });\r\n\r\n      return getDbPromise;\r\n    },\r\n    changesCollectionName,\r\n    metaData,\r\n    updateNeeded,\r\n    newCollections: [\r\n      ...(dbState ? dbState.newCollections : []),\r\n      ...newCollections,\r\n    ],\r\n  };\r\n\r\n  IDB_DATABASE_STATE_BY_NAME.set(databaseName, newDbState);\r\n\r\n  return newDbState;\r\n};\r\n\r\nexport function getPrimaryFieldOfPrimaryKey<RxDocType>(\r\n  primaryKey: PrimaryKey<RxDocType>\r\n): keyof RxDocType {\r\n  if (typeof primaryKey === \"string\") {\r\n    return primaryKey as any;\r\n  } else {\r\n    return (primaryKey as CompositePrimaryKey<RxDocType>).key;\r\n  }\r\n}\r\n\r\nexport function newRxError(\r\n  code: RxErrorKey,\r\n  parameters?: RxErrorParameters\r\n): RxError {\r\n  return new RxError(code, overwritable.tunnelErrorMessage(code), parameters);\r\n}\r\n"],"file":"db-helpers.js"}