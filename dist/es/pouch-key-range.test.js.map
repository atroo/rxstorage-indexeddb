{"version":3,"sources":["../../src/pouch-key-range.test.ts"],"names":["test","indexes","name","value","primary","expect","selector","toEqual","field","queryOpts","inMemoryFields","color","$gte","$lte","startkey","endkey","notIndexed","secret","compound","$gt","$lt","inclusiveStart","inclusiveEnd","$exists","$eq"],"mappings":"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","sourcesContent":["import { generatePouchKeyRange } from \"./pouch-key-range\";\r\n\r\ntest(\"generate pouch key range\", () => {\r\n  const indexes = [\r\n    {\r\n      name: \"secret.color\",\r\n      value: [\"secret\", \"color\"],\r\n    },\r\n    {\r\n      name: \"name\",\r\n      value: \"name\",\r\n      primary: true,\r\n    },\r\n  ];\r\n\r\n  expect(generatePouchKeyRange({ selector: {} }, indexes)).toEqual({\r\n    field: null,\r\n    queryOpts: null,\r\n    inMemoryFields: [],\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gte: \"blue\",\r\n            $lte: \"jade\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"blue\"],\r\n      endkey: [\"jade\"],\r\n    },\r\n    inMemoryFields: [],\r\n    field: \"color\",\r\n    notIndexed: true,\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gte: \"blue\",\r\n            $lte: \"jade\",\r\n          },\r\n          secret: {\r\n            $gte: \"definite_marsupial\",\r\n            $lte: \"grumpy_fox\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"definite_marsupial\", \"blue\"],\r\n      endkey: [\"grumpy_fox\", \"jade\"],\r\n      compound: true,\r\n    },\r\n    inMemoryFields: [\"color\", \"secret\"],\r\n    field: \"secret.color\",\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gt: \"blue\",\r\n            $lt: \"jade\",\r\n          },\r\n          secret: {\r\n            $gte: \"definite_marsupial\",\r\n            $lte: \"grumpy_fox\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"definite_marsupial\", \"blue\"],\r\n      endkey: [\"grumpy_fox\", \"jade\"],\r\n      inclusiveStart: false,\r\n      inclusiveEnd: false,\r\n      compound: true,\r\n    },\r\n    inMemoryFields: [\"color\", \"secret\"],\r\n    field: \"secret.color\",\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gte: \"blue\",\r\n            $lte: \"jade\",\r\n            $exists: true,\r\n          },\r\n          secret: {\r\n            $gte: \"definite_marsupial\",\r\n            $lte: \"grumpy_fox\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"definite_marsupial\"],\r\n      endkey: [\"grumpy_fox\"],\r\n    },\r\n    inMemoryFields: [\"color\"],\r\n    field: \"secret\",\r\n    notIndexed: true,\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gte: \"blue\",\r\n            $lte: \"tan\",\r\n          },\r\n          secret: {\r\n            $eq: \"vague_cardinal\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"vague_cardinal\", \"blue\"],\r\n      endkey: [\"vague_cardinal\", \"tan\"],\r\n      compound: true,\r\n    },\r\n    inMemoryFields: [\"color\", \"secret\"],\r\n    field: \"secret.color\",\r\n  });\r\n\r\n  expect(\r\n    generatePouchKeyRange(\r\n      {\r\n        selector: {\r\n          color: {\r\n            $gte: \"blue\",\r\n            $lte: \"tan\",\r\n            $exists: true,\r\n          },\r\n          secret: {\r\n            $eq: \"vague_cardinal\",\r\n          },\r\n        },\r\n      },\r\n      indexes\r\n    )\r\n  ).toEqual({\r\n    queryOpts: {\r\n      startkey: [\"vague_cardinal\"],\r\n      endkey: [\"vague_cardinal\"],\r\n    },\r\n    inMemoryFields: [\"color\"],\r\n    field: \"secret\",\r\n    notIndexed: true,\r\n  });\r\n});\r\n"],"file":"pouch-key-range.test.js"}