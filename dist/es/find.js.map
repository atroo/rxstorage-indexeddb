{"version":3,"sources":["../../src/find.ts"],"names":["require","filterInMemoryFields","find","db","collectionName","query","metaDB","getAllFromIndex","IDBKeyRange","bound","name","indexedCols","translatedSelector","field","queryOpts","keyRange","rows","console","log","getAll","inMemoryFields","length","map","row","doc"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA,eAAiCA,OAAO,CAAC,uBAAD,CAAxC;AAAA,IAAQC,oBAAR,YAAQA,oBAAR;;AAEO,IAAMC,IAAI;AAAA,2FAAG,iBAClBC,EADkB,EAElBC,cAFkB,EAGlBC,KAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKG,+BALH;;AAAA;AAKZC,YAAAA,MALY;AAAA;AAAA,mBAMQA,MAAM,CAACC,eAAP,CACxB,aADwB,EAExB,kBAFwB,EAGxBC,WAAW,CAACC,KAAZ,CAAkB,CAACN,EAAE,CAACO,IAAJ,EAAUN,cAAV,CAAlB,EAA6C,CAACD,EAAE,CAACO,IAAJ,EAAUN,cAAV,CAA7C,CAHwB,CANR;;AAAA;AAMZO,YAAAA,WANY;AAWZC,YAAAA,kBAXY,GAWS,mCAA4BP,KAA5B,EAAmCM,WAAnC,CAXT;;AAAA,kBAcdC,kBAAkB,CAACC,KAAnB,IAA4BD,kBAAkB,CAACE,SAdjC;AAAA;AAAA;AAAA;;AAeVC,YAAAA,QAfU,GAeC,mCAAiBH,kBAAkB,CAACE,SAApC,CAfD;AAAA;AAAA,mBAgBHX,EAAE,CAACI,eAAH,CACXH,cADW,EAEXQ,kBAAkB,CAACC,KAFR,EAGXE,QAHW,CAhBG;;AAAA;AAgBhBC,YAAAA,IAhBgB;AAqBhBC,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AArBgB;AAAA;;AAAA;AAAA;AAAA,mBAuBHb,EAAE,CAACgB,MAAH,CAAUf,cAAV,CAvBG;;AAAA;AAuBhBY,YAAAA,IAvBgB;AAwBhBC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,IAAxB;;AAxBgB;AA2BlB,gBAAIJ,kBAAkB,CAACQ,cAAnB,CAAkCC,MAAtC,EAA8C;AAC5CL,cAAAA,IAAI,GAAGf,oBAAoB,CACzBe,IAAI,CAACM,GAAL,CAAS,UAACC,GAAD,EAAS;AAChB;AACA;AACA,uBAAO;AAAEC,kBAAAA,GAAG,EAAED;AAAP,iBAAP;AACD,eAJD,CADyB,EAMzBlB,KANyB,EAOzBO,kBAAkB,CAACQ,cAPM,CAA3B;AASAH,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AACD;;AAtCiB,6CAwCXA,IAxCW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJd,IAAI;AAAA;AAAA;AAAA,GAAV","sourcesContent":["import { IDBPDatabase } from \"idb\";\r\nimport { MangoQuery } from \"rxdb/dist/types/types\";\r\nimport { translateMangoQuerySelector } from \".\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { generateKeyRange } from \"./idb-key-range\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\nexport const find = async <RxDocType>(\r\n  db: IDBPDatabase<unknown>,\r\n  collectionName: string,\r\n  query: MangoQuery<RxDocType>\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  const indexedCols = await metaDB.getAllFromIndex(\r\n    \"indexedCols\",\r\n    \"dbNameCollection\",\r\n    IDBKeyRange.bound([db.name, collectionName], [db.name, collectionName])\r\n  );\r\n  const translatedSelector = translateMangoQuerySelector(query, indexedCols);\r\n\r\n  let rows;\r\n  if (translatedSelector.field && translatedSelector.queryOpts) {\r\n    const keyRange = generateKeyRange(translatedSelector.queryOpts);\r\n    rows = await db.getAllFromIndex(\r\n      collectionName,\r\n      translatedSelector.field,\r\n      keyRange\r\n    );\r\n    console.log(\"rows from index\", rows);\r\n  } else {\r\n    rows = await db.getAll(collectionName);\r\n    console.log(\"all rows\", rows);\r\n  }\r\n\r\n  if (translatedSelector.inMemoryFields.length) {\r\n    rows = filterInMemoryFields(\r\n      rows.map((row) => {\r\n        // make data compatible with filterInMemoryFields\r\n        // TODO: copy and change this util\r\n        return { doc: row };\r\n      }),\r\n      query,\r\n      translatedSelector.inMemoryFields\r\n    );\r\n    console.log(\"filtered rows: \", rows);\r\n  }\r\n\r\n  return rows;\r\n};\r\n"],"file":"find.js"}