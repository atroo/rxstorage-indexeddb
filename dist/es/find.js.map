{"version":3,"sources":["../../src/find.ts"],"names":["require","filterInMemoryFields","find","db","collectionName","query","metaDB","get","name","indexesMeta","indexedCols","indexes","console","log","pouchKeyRangeData","store","transaction","field","queryOpts","keyRange","index","notIndexed","openCursor","cursor","getAll","d","getRows","rows","map","row","doc","inMemoryFields","limit","Infinity","i","push","value"],"mappings":"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","sourcesContent":["import { IDBPCursorWithValue, IDBPDatabase } from \"idb\";\r\nimport { MangoQuery } from \"rxdb/dist/types/types\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { generateKeyRange } from \"./idb-key-range\";\r\nimport { generatePouchKeyRange } from \"./pouch-key-range\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\n// TODO: types\r\n\r\nexport const find = async <RxDocType>(\r\n  db: IDBPDatabase<unknown>,\r\n  collectionName: string,\r\n  query: MangoQuery<RxDocType>\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  const indexesMeta = await metaDB.get(\"indexedCols\", [\r\n    db.name,\r\n    collectionName,\r\n  ]);\r\n\r\n  const indexedCols = indexesMeta ? indexesMeta.indexes : [];\r\n  console.log(\"indexedCols\", indexedCols);\r\n  const pouchKeyRangeData = generatePouchKeyRange(query, indexedCols);\r\n\r\n  const store = db.transaction(collectionName).store;\r\n  let cursor: IDBPCursorWithValue<\r\n    unknown,\r\n    ArrayLike<any>,\r\n    string,\r\n    unknown,\r\n    \"readonly\"\r\n  > | null;\r\n  if (pouchKeyRangeData.field && pouchKeyRangeData.queryOpts) {\r\n    const keyRange = generateKeyRange(pouchKeyRangeData.queryOpts);\r\n    const index = pouchKeyRangeData.notIndexed\r\n      ? store\r\n      : store.index(pouchKeyRangeData.field);\r\n    cursor = await index.openCursor(keyRange);\r\n    const d = await index.getAll(keyRange);\r\n  } else {\r\n    cursor = await store.openCursor();\r\n  }\r\n\r\n  let rows = await getRows(cursor);\r\n\r\n  /**\r\n   * Filter in Memory Fields will take care of sort, limit and skip.\r\n   * TODO: if there's indexed field, then use IDBKeyRange to sort data.\r\n   */\r\n\r\n  rows = filterInMemoryFields(\r\n    rows.map((row) => {\r\n      // make data compatible with filterInMemoryFields\r\n      // TODO: fork \"pouchdb-selector-core\" and adapt lib for our uses case.\r\n      return { doc: row };\r\n    }),\r\n    query,\r\n    pouchKeyRangeData.inMemoryFields\r\n  );\r\n  return rows.map((row) => {\r\n    return row.doc;\r\n  });\r\n};\r\n\r\nconst getRows = async (\r\n  cursor: IDBPCursorWithValue | null,\r\n  limit = Infinity\r\n) => {\r\n  const rows = [];\r\n  let i = 0;\r\n  while (cursor && i < limit) {\r\n    rows.push(cursor.value);\r\n    i += 1;\r\n    cursor = await cursor.continue();\r\n  }\r\n\r\n  return rows;\r\n};\r\n"],"file":"find.js"}