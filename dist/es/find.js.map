{"version":3,"sources":["../../src/find.ts"],"names":["require","filterInMemoryFields","find","db","databaseName","collectionName","query","metaDB","get","indexesMeta","indexedCols","indexes","pouchKeyRangeData","store","transaction","field","queryOpts","notIndexed","keyRange","index","primary","results","console","log","openCursor","cursor","getRows","rows","map","row","doc","inMemoryFields","limit","Infinity","i","push","value"],"mappings":"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","sourcesContent":["import { IDBPCursorWithValue, IDBPDatabase } from \"idb\";\r\nimport { MangoQuery } from \"rxdb/dist/types/types\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { generateKeyRange } from \"./idb-key-range\";\r\nimport { generatePouchKeyRange } from \"./pouch-key-range\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\n// TODO: types\r\n\r\nexport const find = async <RxDocType>(\r\n  db: IDBPDatabase<unknown>,\r\n  databaseName: string,\r\n  collectionName: string,\r\n  query: MangoQuery<RxDocType>\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  const indexesMeta = await metaDB.get(\"indexedCols\", [\r\n    databaseName,\r\n    collectionName,\r\n  ]);\r\n\r\n  const indexedCols = indexesMeta ? indexesMeta.indexes : [];\r\n  const pouchKeyRangeData = generatePouchKeyRange(query, indexedCols);\r\n\r\n  const store = db.transaction(collectionName, \"readonly\").store;\r\n  let cursor: IDBPCursorWithValue<\r\n    unknown,\r\n    ArrayLike<any>,\r\n    string,\r\n    unknown,\r\n    \"readonly\"\r\n  > | null;\r\n  if (\r\n    pouchKeyRangeData.field &&\r\n    pouchKeyRangeData.queryOpts &&\r\n    !pouchKeyRangeData.notIndexed\r\n  ) {\r\n    const keyRange = generateKeyRange(pouchKeyRangeData.queryOpts);\r\n    const index = pouchKeyRangeData.primary\r\n      ? store\r\n      : store.index(pouchKeyRangeData.field);\r\n    const results = await index.get(keyRange);\r\n    console.log(\"RESULTS\", results);\r\n    cursor = await index.openCursor(keyRange);\r\n  } else {\r\n    cursor = await store.openCursor();\r\n  }\r\n\r\n  let rows = await getRows(cursor);\r\n\r\n  /**\r\n   * Filter in Memory Fields will take care of sort, limit and skip.\r\n   * TODO: if there's indexed field, then use IDBKeyRange to sort data.\r\n   */\r\n\r\n  rows = filterInMemoryFields(\r\n    rows.map((row) => {\r\n      // make data compatible with filterInMemoryFields\r\n      // TODO: fork \"pouchdb-selector-core\" and adapt lib for our uses case.\r\n      return { doc: row };\r\n    }),\r\n    query,\r\n    pouchKeyRangeData.inMemoryFields\r\n  );\r\n  console.log(\"FIND ROWS\", rows);\r\n  return rows.map((row) => {\r\n    return row.doc;\r\n  });\r\n};\r\n\r\nconst getRows = async (\r\n  cursor: IDBPCursorWithValue | null,\r\n  limit = Infinity\r\n) => {\r\n  const rows = [];\r\n  let i = 0;\r\n  while (cursor && i < limit) {\r\n    rows.push(cursor.value);\r\n    i += 1;\r\n    cursor = await cursor.continue();\r\n  }\r\n\r\n  return rows;\r\n};\r\n"],"file":"find.js"}