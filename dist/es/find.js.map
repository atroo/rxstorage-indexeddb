{"version":3,"sources":["../../src/find.ts"],"names":["require","filterInMemoryFields","find","db","collectionName","query","metaDB","getAll","IDBKeyRange","bound","name","indexedCols","console","log","translatedSelector","store","transaction","field","queryOpts","keyRange","index","openCursor","cursor","getRows","rows","map","row","doc","inMemoryFields","limit","Infinity","i","push","value"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA,eAAiCA,OAAO,CAAC,uBAAD,CAAxC;AAAA,IAAQC,oBAAR,YAAQA,oBAAR,C,CAEA;;;AAEO,IAAMC,IAAI;AAAA,2FAAG,iBAClBC,EADkB,EAElBC,cAFkB,EAGlBC,KAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKG,+BALH;;AAAA;AAKZC,YAAAA,MALY;AAAA;AAAA,mBAMQA,MAAM,CAACC,MAAP,CACxB,aADwB,EAExBC,WAAW,CAACC,KAAZ,CAAkB,CAACN,EAAE,CAACO,IAAJ,EAAUN,cAAV,CAAlB,EAA6C,CAACD,EAAE,CAACO,IAAJ,EAAUN,cAAV,CAA7C,CAFwB,CANR;;AAAA;AAMZO,YAAAA,WANY;AAWlBC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,WAA3B;AACMG,YAAAA,kBAZY,GAYS,0CAAsBT,KAAtB,EAA6BM,WAA7B,CAZT;AAcZI,YAAAA,KAdY,GAcJZ,EAAE,CAACa,WAAH,CAAeZ,cAAf,EAA+BW,KAd3B;;AAAA,kBAsBdD,kBAAkB,CAACG,KAAnB,IAA4BH,kBAAkB,CAACI,SAtBjC;AAAA;AAAA;AAAA;;AAuBVC,YAAAA,QAvBU,GAuBC,mCAAiBL,kBAAkB,CAACI,SAApC,CAvBD;AAwBVE,YAAAA,KAxBU,GAwBFL,KAAK,CAACK,KAAN,CAAYN,kBAAkB,CAACG,KAA/B,CAxBE;AAAA;AAAA,mBAyBDG,KAAK,CAACC,UAAN,CAAiBF,QAAjB,CAzBC;;AAAA;AAyBhBG,YAAAA,MAzBgB;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA2BDP,KAAK,CAACM,UAAN,EA3BC;;AAAA;AA2BhBC,YAAAA,MA3BgB;;AAAA;AAAA;AAAA,mBA8BDC,OAAO,CAACD,MAAD,CA9BN;;AAAA;AA8BdE,YAAAA,IA9Bc;;AAgClB;AACF;AACA;AACA;AAEEA,YAAAA,IAAI,GAAGvB,oBAAoB,CACzBuB,IAAI,CAACC,GAAL,CAAS,UAACC,GAAD,EAAS;AAChB;AACA;AACA,qBAAO;AAAEC,gBAAAA,GAAG,EAAED;AAAP,eAAP;AACD,aAJD,CADyB,EAMzBrB,KANyB,EAOzBS,kBAAkB,CAACc,cAPM,CAA3B;AArCkB,6CA8CXJ,IAAI,CAACC,GAAL,CAAS,UAACC,GAAD,EAAS;AACvB,qBAAOA,GAAG,CAACC,GAAX;AACD,aAFM,CA9CW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJzB,IAAI;AAAA;AAAA;AAAA,GAAV;;;;AAmDP,IAAMqB,OAAO;AAAA,4FAAG,kBACdD,MADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdO,YAAAA,KAFc,8DAENC,QAFM;AAIRN,YAAAA,IAJQ,GAID,EAJC;AAKVO,YAAAA,CALU,GAKN,CALM;;AAAA;AAAA,kBAMPT,MAAM,IAAIS,CAAC,GAAGF,KANP;AAAA;AAAA;AAAA;;AAOZL,YAAAA,IAAI,CAACQ,IAAL,CAAUV,MAAM,CAACW,KAAjB;AACAF,YAAAA,CAAC,IAAI,CAAL;AARY;AAAA,mBASGT,MAAM,YAAN,EATH;;AAAA;AASZA,YAAAA,MATY;AAAA;AAAA;;AAAA;AAAA,8CAYPE,IAZO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPD,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import { IDBPCursorWithValue, IDBPDatabase } from \"idb\";\r\nimport { MangoQuery } from \"rxdb/dist/types/types\";\r\nimport { getDbMeta } from \"./db-meta-helpers\";\r\nimport { generateKeyRange } from \"./idb-key-range\";\r\nimport { generatePouchKeyRange } from \"./pouch-key-range\";\r\nconst { filterInMemoryFields } = require(\"pouchdb-selector-core\");\r\n\r\n// TODO: types\r\n\r\nexport const find = async <RxDocType>(\r\n  db: IDBPDatabase<unknown>,\r\n  collectionName: string,\r\n  query: MangoQuery<RxDocType>\r\n) => {\r\n  const metaDB = await getDbMeta();\r\n  const indexedCols = await metaDB.getAll(\r\n    \"indexedCols\",\r\n    IDBKeyRange.bound([db.name, collectionName], [db.name, collectionName])\r\n  );\r\n\r\n  console.log(\"indexedCols\", indexedCols);\r\n  const translatedSelector = generatePouchKeyRange(query, indexedCols);\r\n\r\n  const store = db.transaction(collectionName).store;\r\n  let cursor: IDBPCursorWithValue<\r\n    unknown,\r\n    ArrayLike<any>,\r\n    string,\r\n    unknown,\r\n    \"readonly\"\r\n  > | null;\r\n  if (translatedSelector.field && translatedSelector.queryOpts) {\r\n    const keyRange = generateKeyRange(translatedSelector.queryOpts);\r\n    const index = store.index(translatedSelector.field);\r\n    cursor = await index.openCursor(keyRange);\r\n  } else {\r\n    cursor = await store.openCursor();\r\n  }\r\n\r\n  let rows = await getRows(cursor);\r\n\r\n  /**\r\n   * Filter in Memory Fields will take care of sort, limit and skip.\r\n   * TODO: if there's indexed field, then use IDBKeyRange to sort data.\r\n   */\r\n\r\n  rows = filterInMemoryFields(\r\n    rows.map((row) => {\r\n      // make data compatible with filterInMemoryFields\r\n      // TODO: fork \"pouchdb-selector-core\" and adapt lib for our uses case.\r\n      return { doc: row };\r\n    }),\r\n    query,\r\n    translatedSelector.inMemoryFields\r\n  );\r\n  return rows.map((row) => {\r\n    return row.doc;\r\n  });\r\n};\r\n\r\nconst getRows = async (\r\n  cursor: IDBPCursorWithValue | null,\r\n  limit = Infinity\r\n) => {\r\n  const rows = [];\r\n  let i = 0;\r\n  while (cursor && i < limit) {\r\n    rows.push(cursor.value);\r\n    i += 1;\r\n    cursor = await cursor.continue();\r\n  }\r\n\r\n  return rows;\r\n};\r\n"],"file":"find.js"}